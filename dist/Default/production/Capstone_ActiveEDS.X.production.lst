

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Fri Apr 22 08:05:13 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4685
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    34  0000                     
    35                           	psect	idataCOMRAM
    36  001CEA                     __pidataCOMRAM:
    37                           	opt stack 0
    38                           
    39                           ;initializer for _extendPos
    40  001CEA  0320               	dw	800
    41                           
    42                           ;initializer for _retractPos
    43  001CEC  00C8               	dw	200
    44  0000                     _RXFCON0bits	set	3540
    45  0000                     _RXB1CONbits	set	3920
    46  0000                     _RXB1D0	set	3926
    47  0000                     _RXB1D1	set	3927
    48  0000                     _RXB1D2	set	3928
    49  0000                     _RXB1D3	set	3929
    50  0000                     _RXB1D4	set	3930
    51  0000                     _RXB1D5	set	3931
    52  0000                     _RXB1D6	set	3932
    53  0000                     _RXB1D7	set	3933
    54  0000                     _RXB1SIDH	set	3921
    55  0000                     _RXB1SIDL	set	3922
    56  0000                     _RXF0SIDH	set	3840
    57  0000                     _RXF0SIDL	set	3841
    58  0000                     _RXF0SIDLbits	set	3841
    59  0000                     _RXM0SIDH	set	3864
    60  0000                     _RXM0SIDL	set	3865
    61  0000                     _TXB0CONbits	set	3904
    62  0000                     _TXB0D0	set	3910
    63  0000                     _TXB0D1	set	3911
    64  0000                     _TXB0D2	set	3912
    65  0000                     _TXB0D3	set	3913
    66  0000                     _TXB0D4	set	3914
    67  0000                     _TXB0D5	set	3915
    68  0000                     _TXB0D6	set	3916
    69  0000                     _TXB0D7	set	3917
    70  0000                     _TXB0DLC	set	3909
    71  0000                     _TXB0SIDH	set	3905
    72  0000                     _TXB0SIDL	set	3906
    73  0000                     _TXB0SIDLbits	set	3906
    74  0000                     _RXB1DLC	set	3925
    75  0000                     _ADCON0bits	set	4034
    76  0000                     _ADCON1bits	set	4033
    77  0000                     _ADCON2bits	set	4032
    78  0000                     _ADRESH	set	4036
    79  0000                     _ADRESL	set	4035
    80  0000                     _BRGCON1bits	set	3952
    81  0000                     _BRGCON2bits	set	3953
    82  0000                     _BRGCON3bits	set	3954
    83  0000                     _CANCONbits	set	3951
    84  0000                     _CANSTATbits	set	3950
    85  0000                     _CIOCONbits	set	3955
    86  0000                     _ECANCONbits	set	3959
    87  0000                     _INTCONbits	set	4082
    88  0000                     _LATAbits	set	3977
    89  0000                     _LATBbits	set	3978
    90  0000                     _LATCbits	set	3979
    91  0000                     _LATDbits	set	3980
    92  0000                     _OSCCONbits	set	4051
    93  0000                     _OSCTUNEbits	set	3995
    94  0000                     _PIE3bits	set	4003
    95  0000                     _PIR1bits	set	3998
    96  0000                     _RCONbits	set	4048
    97  0000                     _RCREG	set	4014
    98  0000                     _RCSTAbits	set	4011
    99  0000                     _RXB0CONbits	set	3936
   100  0000                     _RXB0D0	set	3942
   101  0000                     _RXB0D1	set	3943
   102  0000                     _RXB0D2	set	3944
   103  0000                     _RXB0D3	set	3945
   104  0000                     _RXB0D4	set	3946
   105  0000                     _RXB0D5	set	3947
   106  0000                     _RXB0D6	set	3948
   107  0000                     _RXB0D7	set	3949
   108  0000                     _RXB0SIDH	set	3937
   109  0000                     _RXB0SIDL	set	3938
   110  0000                     _SPBRG	set	4015
   111  0000                     _TRISAbits	set	3986
   112  0000                     _TRISBbits	set	3987
   113  0000                     _TRISCbits	set	3988
   114  0000                     _TRISDbits	set	3989
   115  0000                     _TRISEbits	set	3990
   116  0000                     _TXREG	set	4013
   117  0000                     _TXSTAbits	set	4012
   118  0000                     _RXB0DLC	set	3941
   119  0000                     _RCIF	set	31989
   120  0000                     _TRMT	set	32097
   121                           
   122                           	psect	smallconst
   123  000D00                     __psmallconst:
   124                           	opt stack 0
   125  000D00  00                 	db	0
   126  000D01                     STR_2:
   127  000D01  43                 	db	67	;'C'
   128  000D02  6F                 	db	111	;'o'
   129  000D03  6D                 	db	109	;'m'
   130  000D04  6D                 	db	109	;'m'
   131  000D05  61                 	db	97	;'a'
   132  000D06  6E                 	db	110	;'n'
   133  000D07  64                 	db	100	;'d'
   134  000D08  20                 	db	32
   135  000D09  53                 	db	83	;'S'
   136  000D0A  65                 	db	101	;'e'
   137  000D0B  6E                 	db	110	;'n'
   138  000D0C  74                 	db	116	;'t'
   139  000D0D  20                 	db	32
   140  000D0E  28                 	db	40
   141  000D0F  41                 	db	65	;'A'
   142  000D10  72                 	db	114	;'r'
   143  000D11  72                 	db	114	;'r'
   144  000D12  61                 	db	97	;'a'
   145  000D13  79                 	db	121	;'y'
   146  000D14  20                 	db	32
   147  000D15  52                 	db	82	;'R'
   148  000D16  65                 	db	101	;'e'
   149  000D17  74                 	db	116	;'t'
   150  000D18  72                 	db	114	;'r'
   151  000D19  61                 	db	97	;'a'
   152  000D1A  63                 	db	99	;'c'
   153  000D1B  74                 	db	116	;'t'
   154  000D1C  65                 	db	101	;'e'
   155  000D1D  64                 	db	100	;'d'
   156  000D1E  29                 	db	41
   157  000D1F  0D                 	db	13
   158  000D20  0A                 	db	10
   159  000D21  00                 	db	0
   160  000D22                     STR_1:
   161  000D22  43                 	db	67	;'C'
   162  000D23  6F                 	db	111	;'o'
   163  000D24  6D                 	db	109	;'m'
   164  000D25  6D                 	db	109	;'m'
   165  000D26  61                 	db	97	;'a'
   166  000D27  6E                 	db	110	;'n'
   167  000D28  64                 	db	100	;'d'
   168  000D29  20                 	db	32
   169  000D2A  53                 	db	83	;'S'
   170  000D2B  65                 	db	101	;'e'
   171  000D2C  6E                 	db	110	;'n'
   172  000D2D  74                 	db	116	;'t'
   173  000D2E  20                 	db	32
   174  000D2F  28                 	db	40
   175  000D30  41                 	db	65	;'A'
   176  000D31  72                 	db	114	;'r'
   177  000D32  72                 	db	114	;'r'
   178  000D33  61                 	db	97	;'a'
   179  000D34  79                 	db	121	;'y'
   180  000D35  20                 	db	32
   181  000D36  45                 	db	69	;'E'
   182  000D37  78                 	db	120	;'x'
   183  000D38  74                 	db	116	;'t'
   184  000D39  65                 	db	101	;'e'
   185  000D3A  6E                 	db	110	;'n'
   186  000D3B  64                 	db	100	;'d'
   187  000D3C  65                 	db	101	;'e'
   188  000D3D  64                 	db	100	;'d'
   189  000D3E  29                 	db	41
   190  000D3F  0D                 	db	13
   191  000D40  0A                 	db	10
   192  000D41  00                 	db	0
   193  000D42                     STR_4:
   194  000D42  43                 	db	67	;'C'
   195  000D43  6F                 	db	111	;'o'
   196  000D44  6D                 	db	109	;'m'
   197  000D45  6D                 	db	109	;'m'
   198  000D46  61                 	db	97	;'a'
   199  000D47  6E                 	db	110	;'n'
   200  000D48  64                 	db	100	;'d'
   201  000D49  20                 	db	32
   202  000D4A  53                 	db	83	;'S'
   203  000D4B  65                 	db	101	;'e'
   204  000D4C  6E                 	db	110	;'n'
   205  000D4D  74                 	db	116	;'t'
   206  000D4E  20                 	db	32
   207  000D4F  28                 	db	40
   208  000D50  41                 	db	65	;'A'
   209  000D51  72                 	db	114	;'r'
   210  000D52  72                 	db	114	;'r'
   211  000D53  61                 	db	97	;'a'
   212  000D54  79                 	db	121	;'y'
   213  000D55  20                 	db	32
   214  000D56  42                 	db	66	;'B'
   215  000D57  61                 	db	97	;'a'
   216  000D58  63                 	db	99	;'c'
   217  000D59  6B                 	db	107	;'k'
   218  000D5A  77                 	db	119	;'w'
   219  000D5B  61                 	db	97	;'a'
   220  000D5C  72                 	db	114	;'r'
   221  000D5D  64                 	db	100	;'d'
   222  000D5E  29                 	db	41
   223  000D5F  0D                 	db	13
   224  000D60  0A                 	db	10
   225  000D61  00                 	db	0
   226  000D62                     STR_3:
   227  000D62  43                 	db	67	;'C'
   228  000D63  6F                 	db	111	;'o'
   229  000D64  6D                 	db	109	;'m'
   230  000D65  6D                 	db	109	;'m'
   231  000D66  61                 	db	97	;'a'
   232  000D67  6E                 	db	110	;'n'
   233  000D68  64                 	db	100	;'d'
   234  000D69  20                 	db	32
   235  000D6A  53                 	db	83	;'S'
   236  000D6B  65                 	db	101	;'e'
   237  000D6C  6E                 	db	110	;'n'
   238  000D6D  74                 	db	116	;'t'
   239  000D6E  20                 	db	32
   240  000D6F  28                 	db	40
   241  000D70  41                 	db	65	;'A'
   242  000D71  72                 	db	114	;'r'
   243  000D72  72                 	db	114	;'r'
   244  000D73  61                 	db	97	;'a'
   245  000D74  79                 	db	121	;'y'
   246  000D75  20                 	db	32
   247  000D76  46                 	db	70	;'F'
   248  000D77  6F                 	db	111	;'o'
   249  000D78  72                 	db	114	;'r'
   250  000D79  77                 	db	119	;'w'
   251  000D7A  61                 	db	97	;'a'
   252  000D7B  72                 	db	114	;'r'
   253  000D7C  64                 	db	100	;'d'
   254  000D7D  29                 	db	41
   255  000D7E  0D                 	db	13
   256  000D7F  0A                 	db	10
   257  000D80  00                 	db	0
   258  000D81                     STR_5:
   259  000D81  43                 	db	67	;'C'
   260  000D82  6F                 	db	111	;'o'
   261  000D83  6D                 	db	109	;'m'
   262  000D84  6D                 	db	109	;'m'
   263  000D85  61                 	db	97	;'a'
   264  000D86  6E                 	db	110	;'n'
   265  000D87  64                 	db	100	;'d'
   266  000D88  20                 	db	32
   267  000D89  53                 	db	83	;'S'
   268  000D8A  65                 	db	101	;'e'
   269  000D8B  6E                 	db	110	;'n'
   270  000D8C  74                 	db	116	;'t'
   271  000D8D  20                 	db	32
   272  000D8E  28                 	db	40
   273  000D8F  41                 	db	65	;'A'
   274  000D90  72                 	db	114	;'r'
   275  000D91  72                 	db	114	;'r'
   276  000D92  61                 	db	97	;'a'
   277  000D93  79                 	db	121	;'y'
   278  000D94  20                 	db	32
   279  000D95  43                 	db	67	;'C'
   280  000D96  75                 	db	117	;'u'
   281  000D97  73                 	db	115	;'s'
   282  000D98  74                 	db	116	;'t'
   283  000D99  6F                 	db	111	;'o'
   284  000D9A  6D                 	db	109	;'m'
   285  000D9B  29                 	db	41
   286  000D9C  0D                 	db	13
   287  000D9D  0A                 	db	10
   288  000D9E  00                 	db	0
   289  0000                     
   290                           ; #config settings
   291  000D9F  00                 	db	0	; dummy byte at the end
   292  0000                     
   293                           	psect	cinit
   294  001BBC                     __pcinit:
   295                           	opt stack 0
   296  001BBC                     start_initialization:
   297                           	opt stack 0
   298  001BBC                     __initialization:
   299                           	opt stack 0
   300                           
   301                           ; Clear objects allocated to COMRAM (21 bytes)
   302  001BBC  EE00  F034         	lfsr	0,__pbssCOMRAM
   303  001BC0  0E15               	movlw	21
   304  001BC2                     clear_0:
   305  001BC2  6AEE               	clrf	postinc0,c
   306  001BC4  06E8               	decf	wreg,f,c
   307  001BC6  E1FD               	bnz	clear_0
   308                           
   309                           ; Initialize objects allocated to COMRAM (4 bytes)
   310                           ; load TBLPTR registers with __pidataCOMRAM
   311  001BC8  0EEA               	movlw	low __pidataCOMRAM
   312  001BCA  6EF6               	movwf	tblptrl,c
   313  001BCC  0E1C               	movlw	high __pidataCOMRAM
   314  001BCE  6EF7               	movwf	tblptrh,c
   315  001BD0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   316  001BD2  6EF8               	movwf	tblptru,c
   317  001BD4  EE00  F049         	lfsr	0,__pdataCOMRAM
   318  001BD8  EE10 F004          	lfsr	1,4
   319  001BDC                     copy_data0:
   320  001BDC  0009               	tblrd		*+
   321  001BDE  CFF5 FFEE          	movff	tablat,postinc0
   322  001BE2  50E5               	movf	postdec1,w,c
   323  001BE4  50E1               	movf	fsr1l,w,c
   324  001BE6  E1FA               	bnz	copy_data0
   325  001BE8                     end_of_initialization:
   326                           	opt stack 0
   327  001BE8                     __end_of__initialization:
   328                           	opt stack 0
   329  001BE8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   330  001BEA  6EF8               	movwf	tblptru,c
   331  001BEC  0E0D               	movlw	high __Lsmallconst
   332  001BEE  6EF7               	movwf	tblptrh,c
   333  001BF0  0100               	movlb	0
   334  001BF2  EFD0  F006         	goto	_main	;jump to C main() function
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           postdec1	equ	0xFE5
   342                           fsr1l	equ	0xFE1
   343                           
   344                           	psect	bssCOMRAM
   345  000034                     __pbssCOMRAM:
   346                           	opt stack 0
   347  000034                     _BACK:
   348                           	opt stack 0
   349  000034                     	ds	1
   350  000035                     _CUSTOM:
   351                           	opt stack 0
   352  000035                     	ds	1
   353  000036                     _EXTEND:
   354                           	opt stack 0
   355  000036                     	ds	1
   356  000037                     _FORW:
   357                           	opt stack 0
   358  000037                     	ds	1
   359  000038                     _RETRACT:
   360                           	opt stack 0
   361  000038                     	ds	1
   362  000039                     _margin0:
   363                           	opt stack 0
   364  000039                     	ds	2
   365  00003B                     _margin1:
   366                           	opt stack 0
   367  00003B                     	ds	2
   368  00003D                     _margin2:
   369                           	opt stack 0
   370  00003D                     	ds	2
   371  00003F                     _margin3:
   372                           	opt stack 0
   373  00003F                     	ds	2
   374  000041                     _margin4:
   375                           	opt stack 0
   376  000041                     	ds	2
   377  000043                     _margin5:
   378                           	opt stack 0
   379  000043                     	ds	2
   380  000045                     _margin6:
   381                           	opt stack 0
   382  000045                     	ds	2
   383  000047                     _margin7:
   384                           	opt stack 0
   385  000047                     	ds	2
   386                           tblptru	equ	0xFF8
   387                           tblptrh	equ	0xFF7
   388                           tblptrl	equ	0xFF6
   389                           tablat	equ	0xFF5
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           postdec1	equ	0xFE5
   393                           fsr1l	equ	0xFE1
   394                           
   395                           	psect	dataCOMRAM
   396  000049                     __pdataCOMRAM:
   397                           	opt stack 0
   398  000049                     _extendPos:
   399                           	opt stack 0
   400  000049                     	ds	2
   401  00004B                     _retractPos:
   402                           	opt stack 0
   403  00004B                     	ds	2
   404                           tblptru	equ	0xFF8
   405                           tblptrh	equ	0xFF7
   406                           tblptrl	equ	0xFF6
   407                           tablat	equ	0xFF5
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           postdec1	equ	0xFE5
   411                           fsr1l	equ	0xFE1
   412                           
   413                           	psect	cstackCOMRAM
   414  000001                     __pcstackCOMRAM:
   415                           	opt stack 0
   416  000001                     ??_ecan_init:
   417  000001                     ?_readADC:
   418                           	opt stack 0
   419  000001                     ?___aldiv:
   420                           	opt stack 0
   421  000001                     _uart_data_ready$2270:
   422                           	opt stack 0
   423  000001                     uart_write@data:
   424                           	opt stack 0
   425  000001                     movement@current_pos:
   426                           	opt stack 0
   427  000001                     ___aldiv@dividend:
   428                           	opt stack 0
   429                           
   430                           ; 4 bytes @ 0x0
   431  000001                     	ds	1
   432  000002                     uart_write_text@text:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x1
   436  000002                     	ds	1
   437  000003                     readADC@digitalVal:
   438                           	opt stack 0
   439  000003                     ecan_init@sid0:
   440                           	opt stack 0
   441  000003                     movement@set_point:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x2
   445  000003                     	ds	1
   446  000004                     ??_uart_write_text:
   447                           
   448                           ; 1 bytes @ 0x3
   449  000004                     	ds	1
   450  000005                     ecan_init@mask0:
   451                           	opt stack 0
   452  000005                     movement@actuator:
   453                           	opt stack 0
   454  000005                     ___aldiv@divisor:
   455                           	opt stack 0
   456                           
   457                           ; 4 bytes @ 0x4
   458  000005                     	ds	1
   459  000006                     uart_write_text@i:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x5
   463  000006                     	ds	1
   464  000007                     movement@margin:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x6
   468  000007                     	ds	2
   469  000009                     ___aldiv@counter:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x8
   473  000009                     	ds	1
   474  00000A                     ___aldiv@sign:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x9
   478  00000A                     	ds	1
   479  00000B                     movement@move0:
   480                           	opt stack 0
   481  00000B                     ___aldiv@quotient:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0xA
   485  00000B                     	ds	2
   486  00000D                     movement@move1:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0xC
   490  00000D                     	ds	2
   491  00000F                     uart_init@baudrate:
   492                           	opt stack 0
   493                           
   494                           ; 4 bytes @ 0xE
   495  00000F                     	ds	4
   496  000013                     ??_uart_init:
   497                           
   498                           ; 1 bytes @ 0x12
   499  000013                     	ds	8
   500  00001B                     uart_init@x:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x1A
   504  00001B                     	ds	2
   505  00001D                     main@actuator0:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x1C
   509  00001D                     	ds	2
   510  00001F                     main@actuator1:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x1E
   514  00001F                     	ds	2
   515  000021                     main@actuator2:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x20
   519  000021                     	ds	2
   520  000023                     main@actuator3:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x22
   524  000023                     	ds	2
   525  000025                     main@actuator4:
   526                           	opt stack 0
   527                           
   528                           ; 2 bytes @ 0x24
   529  000025                     	ds	2
   530  000027                     main@actuator5:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x26
   534  000027                     	ds	2
   535  000029                     main@actuator6:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x28
   539  000029                     	ds	2
   540  00002B                     main@actuator7:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x2A
   544  00002B                     	ds	2
   545  00002D                     main@newPos:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x2C
   549  00002D                     	ds	2
   550  00002F                     main@message:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x2E
   554  00002F                     	ds	1
   555  000030                     main@retractPos:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x2F
   559  000030                     	ds	2
   560  000032                     main@extendPos:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x31
   564  000032                     	ds	2
   565                           tblptru	equ	0xFF8
   566                           tblptrh	equ	0xFF7
   567                           tblptrl	equ	0xFF6
   568                           tablat	equ	0xFF5
   569                           postinc0	equ	0xFEE
   570                           wreg	equ	0xFE8
   571                           postdec1	equ	0xFE5
   572                           fsr1l	equ	0xFE1
   573                           
   574 ;;
   575 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   576 ;;
   577 ;; *************** function _main *****************
   578 ;; Defined at:
   579 ;;		line 58 in file "main.c"
   580 ;; Parameters:    Size  Location     Type
   581 ;;		None
   582 ;; Auto vars:     Size  Location     Type
   583 ;;  message         1   46[COMRAM] unsigned char 
   584 ;;  extendPos       2   49[COMRAM] unsigned int 
   585 ;;  retractPos      2   47[COMRAM] unsigned int 
   586 ;;  newPos          2   44[COMRAM] unsigned int 
   587 ;;  actuator7       2   42[COMRAM] unsigned int 
   588 ;;  actuator6       2   40[COMRAM] unsigned int 
   589 ;;  actuator5       2   38[COMRAM] unsigned int 
   590 ;;  actuator4       2   36[COMRAM] unsigned int 
   591 ;;  actuator3       2   34[COMRAM] unsigned int 
   592 ;;  actuator2       2   32[COMRAM] unsigned int 
   593 ;;  actuator1       2   30[COMRAM] unsigned int 
   594 ;;  actuator0       2   28[COMRAM] unsigned int 
   595 ;; Return value:  Size  Location     Type
   596 ;;                  1    wreg      void 
   597 ;; Registers used:
   598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   599 ;; Tracked objects:
   600 ;;		On entry : 0/0
   601 ;;		On exit  : 0/0
   602 ;;		Unchanged: 0/0
   603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   605 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   607 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   608 ;;Total ram usage:       23 bytes
   609 ;; Hardware stack levels required when called:    2
   610 ;; This function calls:
   611 ;;		_ConfigureOscillator
   612 ;;		_ecan_init
   613 ;;		_movement
   614 ;;		_readADC
   615 ;;		_selectAN0
   616 ;;		_selectAN1
   617 ;;		_selectAN2
   618 ;;		_selectAN3
   619 ;;		_selectAN4
   620 ;;		_selectAN5
   621 ;;		_selectAN6
   622 ;;		_selectAN7
   623 ;;		_setActuatorCntrl
   624 ;;		_setAnalogIn
   625 ;;		_uart_data_ready
   626 ;;		_uart_init
   627 ;;		_uart_read
   628 ;;		_uart_write_text
   629 ;; This function is called by:
   630 ;;		Startup code after reset
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           	psect	text0
   635  000DA0                     __ptext0:
   636                           	opt stack 0
   637  000DA0                     _main:
   638                           	opt stack 29
   639                           
   640                           ;main.c: 61: ConfigureOscillator();
   641                           
   642                           ;incstack = 0
   643  000DA0  EC3A  F00E         	call	_ConfigureOscillator	;wreg free
   644                           
   645                           ;main.c: 62: ecan_init();
   646  000DA4  EC0E  F00D         	call	_ecan_init	;wreg free
   647                           
   648                           ;main.c: 63: uart_init(9600);
   649  000DA8  0E80               	movlw	128
   650  000DAA  6E0F               	movwf	uart_init@baudrate,c
   651  000DAC  0E25               	movlw	37
   652  000DAE  6E10               	movwf	uart_init@baudrate+1,c
   653  000DB0  0E00               	movlw	0
   654  000DB2  6E11               	movwf	uart_init@baudrate+2,c
   655  000DB4  0E00               	movlw	0
   656  000DB6  6E12               	movwf	uart_init@baudrate+3,c
   657  000DB8  EC6D  F00D         	call	_uart_init	;wreg free
   658                           
   659                           ;main.c: 66: setAnalogIn();
   660  000DBC  ECFB  F00D         	call	_setAnalogIn	;wreg free
   661                           
   662                           ;main.c: 67: setActuatorCntrl();
   663  000DC0  EC12  F00E         	call	_setActuatorCntrl	;wreg free
   664                           
   665                           ;main.c: 68: unsigned int actuator0 = 0;
   666  000DC4  0E00               	movlw	0
   667  000DC6  6E1E               	movwf	main@actuator0+1,c
   668  000DC8  0E00               	movlw	0
   669  000DCA  6E1D               	movwf	main@actuator0,c
   670                           
   671                           ;main.c: 69: unsigned int actuator1 = 0;
   672  000DCC  0E00               	movlw	0
   673  000DCE  6E20               	movwf	main@actuator1+1,c
   674  000DD0  0E00               	movlw	0
   675  000DD2  6E1F               	movwf	main@actuator1,c
   676                           
   677                           ;main.c: 70: unsigned int actuator2 = 0;
   678  000DD4  0E00               	movlw	0
   679  000DD6  6E22               	movwf	main@actuator2+1,c
   680  000DD8  0E00               	movlw	0
   681  000DDA  6E21               	movwf	main@actuator2,c
   682                           
   683                           ;main.c: 71: unsigned int actuator3 = 0;
   684  000DDC  0E00               	movlw	0
   685  000DDE  6E24               	movwf	main@actuator3+1,c
   686  000DE0  0E00               	movlw	0
   687  000DE2  6E23               	movwf	main@actuator3,c
   688                           
   689                           ;main.c: 72: unsigned int actuator4 = 0;
   690  000DE4  0E00               	movlw	0
   691  000DE6  6E26               	movwf	main@actuator4+1,c
   692  000DE8  0E00               	movlw	0
   693  000DEA  6E25               	movwf	main@actuator4,c
   694                           
   695                           ;main.c: 73: unsigned int actuator5 = 0;
   696  000DEC  0E00               	movlw	0
   697  000DEE  6E28               	movwf	main@actuator5+1,c
   698  000DF0  0E00               	movlw	0
   699  000DF2  6E27               	movwf	main@actuator5,c
   700                           
   701                           ;main.c: 74: unsigned int actuator6 = 0;
   702  000DF4  0E00               	movlw	0
   703  000DF6  6E2A               	movwf	main@actuator6+1,c
   704  000DF8  0E00               	movlw	0
   705  000DFA  6E29               	movwf	main@actuator6,c
   706                           
   707                           ;main.c: 75: unsigned int actuator7 = 0;
   708  000DFC  0E00               	movlw	0
   709  000DFE  6E2C               	movwf	main@actuator7+1,c
   710  000E00  0E00               	movlw	0
   711  000E02  6E2B               	movwf	main@actuator7,c
   712                           
   713                           ;main.c: 77: LATAbits.LATA7 = 1;
   714  000E04  8E89               	bsf	3977,7,c	;volatile
   715                           
   716                           ;main.c: 79: unsigned int retractPos = 0;
   717  000E06  0E00               	movlw	0
   718  000E08  6E31               	movwf	main@retractPos+1,c
   719  000E0A  0E00               	movlw	0
   720  000E0C  6E30               	movwf	main@retractPos,c
   721                           
   722                           ;main.c: 80: unsigned int extendPos = 400;
   723  000E0E  0E01               	movlw	1
   724  000E10  6E33               	movwf	main@extendPos+1,c
   725  000E12  0E90               	movlw	144
   726  000E14  6E32               	movwf	main@extendPos,c
   727                           
   728                           ;main.c: 82: unsigned int newPos = 0;
   729  000E16  0E00               	movlw	0
   730  000E18  6E2E               	movwf	main@newPos+1,c
   731  000E1A  0E00               	movlw	0
   732  000E1C  6E2D               	movwf	main@newPos,c
   733  000E1E                     l67:
   734                           
   735                           ;main.c: 87: {
   736                           ;main.c: 149: if(uart_data_ready())
   737  000E1E  EC31  F00E         	call	_uart_data_ready	;wreg free
   738  000E22  0900               	iorlw	0
   739  000E24  B4D8               	btfsc	status,2,c
   740  000E26  D171               	goto	l1813
   741                           
   742                           ;main.c: 150: {
   743                           ;main.c: 151: char message = uart_read();
   744  000E28  EC47  F00E         	call	_uart_read	;wreg free
   745  000E2C  6E2F               	movwf	main@message,c
   746                           
   747                           ;main.c: 153: margin0 = 0;
   748  000E2E  0E00               	movlw	0
   749  000E30  6E3A               	movwf	_margin0+1,c
   750  000E32  0E00               	movlw	0
   751  000E34  6E39               	movwf	_margin0,c
   752                           
   753                           ;main.c: 154: margin1 = 0;
   754  000E36  0E00               	movlw	0
   755  000E38  6E3C               	movwf	_margin1+1,c
   756  000E3A  0E00               	movlw	0
   757  000E3C  6E3B               	movwf	_margin1,c
   758                           
   759                           ;main.c: 155: margin2 = 0;
   760  000E3E  0E00               	movlw	0
   761  000E40  6E3E               	movwf	_margin2+1,c
   762  000E42  0E00               	movlw	0
   763  000E44  6E3D               	movwf	_margin2,c
   764                           
   765                           ;main.c: 156: margin3 = 0;
   766  000E46  0E00               	movlw	0
   767  000E48  6E40               	movwf	_margin3+1,c
   768  000E4A  0E00               	movlw	0
   769  000E4C  6E3F               	movwf	_margin3,c
   770                           
   771                           ;main.c: 157: margin4 = 0;
   772  000E4E  0E00               	movlw	0
   773  000E50  6E42               	movwf	_margin4+1,c
   774  000E52  0E00               	movlw	0
   775  000E54  6E41               	movwf	_margin4,c
   776                           
   777                           ;main.c: 158: margin5 = 0;
   778  000E56  0E00               	movlw	0
   779  000E58  6E44               	movwf	_margin5+1,c
   780  000E5A  0E00               	movlw	0
   781  000E5C  6E43               	movwf	_margin5,c
   782                           
   783                           ;main.c: 159: margin6 = 0;
   784  000E5E  0E00               	movlw	0
   785  000E60  6E46               	movwf	_margin6+1,c
   786  000E62  0E00               	movlw	0
   787  000E64  6E45               	movwf	_margin6,c
   788                           
   789                           ;main.c: 160: margin7 = 0;
   790  000E66  0E00               	movlw	0
   791  000E68  6E48               	movwf	_margin7+1,c
   792  000E6A  0E00               	movlw	0
   793  000E6C  6E47               	movwf	_margin7,c
   794                           
   795                           ;main.c: 162: LATAbits.LATA7 ^= 1;
   796  000E6E  7E89               	btg	3977,7,c	;volatile
   797                           
   798                           ;main.c: 164: if (message == 'e')
   799  000E70  0E65               	movlw	101
   800  000E72  182F               	xorwf	main@message,w,c
   801  000E74  A4D8               	btfss	status,2,c
   802  000E76  D011               	goto	l1735
   803                           
   804                           ;main.c: 165: {
   805                           ;main.c: 166: FORW = 0;
   806  000E78  0E00               	movlw	0
   807  000E7A  6E37               	movwf	_FORW,c
   808                           
   809                           ;main.c: 167: BACK = 0;
   810  000E7C  0E00               	movlw	0
   811  000E7E  6E34               	movwf	_BACK,c
   812                           
   813                           ;main.c: 168: EXTEND = 1;
   814  000E80  0E01               	movlw	1
   815  000E82  6E36               	movwf	_EXTEND,c
   816                           
   817                           ;main.c: 169: RETRACT = 0;
   818  000E84  0E00               	movlw	0
   819  000E86  6E38               	movwf	_RETRACT,c
   820                           
   821                           ;main.c: 170: CUSTOM = 0;
   822  000E88  0E00               	movlw	0
   823  000E8A  6E35               	movwf	_CUSTOM,c
   824                           
   825                           ;main.c: 171: uart_write_text("Command Sent (Array Extended)\r\n");
   826  000E8C  0E22               	movlw	low STR_1
   827  000E8E  6E02               	movwf	uart_write_text@text,c
   828  000E90  0E0D               	movlw	high STR_1
   829  000E92  6E03               	movwf	uart_write_text@text+1,c
   830  000E94  ECB9  F00D         	call	_uart_write_text	;wreg free
   831                           
   832                           ;main.c: 172: }
   833  000E98  D138               	goto	l1813
   834  000E9A                     l1735:
   835                           
   836                           ;main.c: 173: else if (message == 'r')
   837  000E9A  0E72               	movlw	114
   838  000E9C  182F               	xorwf	main@message,w,c
   839  000E9E  A4D8               	btfss	status,2,c
   840  000EA0  D011               	goto	l1741
   841                           
   842                           ;main.c: 174: {
   843                           ;main.c: 175: FORW = 0;
   844  000EA2  0E00               	movlw	0
   845  000EA4  6E37               	movwf	_FORW,c
   846                           
   847                           ;main.c: 176: BACK = 0;
   848  000EA6  0E00               	movlw	0
   849  000EA8  6E34               	movwf	_BACK,c
   850                           
   851                           ;main.c: 177: EXTEND = 0;
   852  000EAA  0E00               	movlw	0
   853  000EAC  6E36               	movwf	_EXTEND,c
   854                           
   855                           ;main.c: 178: RETRACT = 1;
   856  000EAE  0E01               	movlw	1
   857  000EB0  6E38               	movwf	_RETRACT,c
   858                           
   859                           ;main.c: 179: CUSTOM = 0;
   860  000EB2  0E00               	movlw	0
   861  000EB4  6E35               	movwf	_CUSTOM,c
   862                           
   863                           ;main.c: 180: uart_write_text("Command Sent (Array Retracted)\r\n");
   864  000EB6  0E01               	movlw	low STR_2
   865  000EB8  6E02               	movwf	uart_write_text@text,c
   866  000EBA  0E0D               	movlw	high STR_2
   867  000EBC  6E03               	movwf	uart_write_text@text+1,c
   868  000EBE  ECB9  F00D         	call	_uart_write_text	;wreg free
   869                           
   870                           ;main.c: 181: }
   871  000EC2  D123               	goto	l1813
   872  000EC4                     l1741:
   873                           
   874                           ;main.c: 182: else if (message == 'f')
   875  000EC4  0E66               	movlw	102
   876  000EC6  182F               	xorwf	main@message,w,c
   877  000EC8  A4D8               	btfss	status,2,c
   878  000ECA  D011               	goto	l1747
   879                           
   880                           ;main.c: 183: {
   881                           ;main.c: 184: FORW = 1;
   882  000ECC  0E01               	movlw	1
   883  000ECE  6E37               	movwf	_FORW,c
   884                           
   885                           ;main.c: 185: BACK = 0;
   886  000ED0  0E00               	movlw	0
   887  000ED2  6E34               	movwf	_BACK,c
   888                           
   889                           ;main.c: 186: EXTEND = 0;
   890  000ED4  0E00               	movlw	0
   891  000ED6  6E36               	movwf	_EXTEND,c
   892                           
   893                           ;main.c: 187: RETRACT = 0;
   894  000ED8  0E00               	movlw	0
   895  000EDA  6E38               	movwf	_RETRACT,c
   896                           
   897                           ;main.c: 188: CUSTOM = 0;
   898  000EDC  0E00               	movlw	0
   899  000EDE  6E35               	movwf	_CUSTOM,c
   900                           
   901                           ;main.c: 189: uart_write_text("Command Sent (Array Forward)\r\n");
   902  000EE0  0E62               	movlw	low STR_3
   903  000EE2  6E02               	movwf	uart_write_text@text,c
   904  000EE4  0E0D               	movlw	high STR_3
   905  000EE6  6E03               	movwf	uart_write_text@text+1,c
   906  000EE8  ECB9  F00D         	call	_uart_write_text	;wreg free
   907                           
   908                           ;main.c: 190: }
   909  000EEC  D10E               	goto	l1813
   910  000EEE                     l1747:
   911                           
   912                           ;main.c: 191: else if (message == 'b')
   913  000EEE  0E62               	movlw	98
   914  000EF0  182F               	xorwf	main@message,w,c
   915  000EF2  A4D8               	btfss	status,2,c
   916  000EF4  D011               	goto	l1753
   917                           
   918                           ;main.c: 192: {
   919                           ;main.c: 193: FORW = 0;
   920  000EF6  0E00               	movlw	0
   921  000EF8  6E37               	movwf	_FORW,c
   922                           
   923                           ;main.c: 194: BACK = 1;
   924  000EFA  0E01               	movlw	1
   925  000EFC  6E34               	movwf	_BACK,c
   926                           
   927                           ;main.c: 195: EXTEND = 0;
   928  000EFE  0E00               	movlw	0
   929  000F00  6E36               	movwf	_EXTEND,c
   930                           
   931                           ;main.c: 196: RETRACT = 0;
   932  000F02  0E00               	movlw	0
   933  000F04  6E38               	movwf	_RETRACT,c
   934                           
   935                           ;main.c: 197: CUSTOM = 0;
   936  000F06  0E00               	movlw	0
   937  000F08  6E35               	movwf	_CUSTOM,c
   938                           
   939                           ;main.c: 198: uart_write_text("Command Sent (Array Backward)\r\n");
   940  000F0A  0E42               	movlw	low STR_4
   941  000F0C  6E02               	movwf	uart_write_text@text,c
   942  000F0E  0E0D               	movlw	high STR_4
   943  000F10  6E03               	movwf	uart_write_text@text+1,c
   944  000F12  ECB9  F00D         	call	_uart_write_text	;wreg free
   945                           
   946                           ;main.c: 199: }
   947  000F16  D0F9               	goto	l1813
   948  000F18                     l1753:
   949                           
   950                           ;main.c: 200: else if (message == '0')
   951  000F18  0E30               	movlw	48
   952  000F1A  182F               	xorwf	main@message,w,c
   953  000F1C  A4D8               	btfss	status,2,c
   954  000F1E  D015               	goto	l1759
   955                           
   956                           ;main.c: 201: {
   957                           ;main.c: 202: FORW = 0;
   958  000F20  0E00               	movlw	0
   959  000F22  6E37               	movwf	_FORW,c
   960                           
   961                           ;main.c: 203: BACK = 0;
   962  000F24  0E00               	movlw	0
   963  000F26  6E34               	movwf	_BACK,c
   964                           
   965                           ;main.c: 204: EXTEND = 0;
   966  000F28  0E00               	movlw	0
   967  000F2A  6E36               	movwf	_EXTEND,c
   968                           
   969                           ;main.c: 205: RETRACT = 0;
   970  000F2C  0E00               	movlw	0
   971  000F2E  6E38               	movwf	_RETRACT,c
   972                           
   973                           ;main.c: 206: CUSTOM = 1;
   974  000F30  0E01               	movlw	1
   975  000F32  6E35               	movwf	_CUSTOM,c
   976                           
   977                           ;main.c: 208: newPos = 0;
   978  000F34  0E00               	movlw	0
   979  000F36  6E2E               	movwf	main@newPos+1,c
   980  000F38  0E00               	movlw	0
   981  000F3A  6E2D               	movwf	main@newPos,c
   982                           
   983                           ;main.c: 209: uart_write_text("Command Sent (Array Custom)\r\n");
   984  000F3C  0E81               	movlw	low STR_5
   985  000F3E  6E02               	movwf	uart_write_text@text,c
   986  000F40  0E0D               	movlw	high STR_5
   987  000F42  6E03               	movwf	uart_write_text@text+1,c
   988  000F44  ECB9  F00D         	call	_uart_write_text	;wreg free
   989                           
   990                           ;main.c: 210: }
   991  000F48  D0E0               	goto	l1813
   992  000F4A                     l1759:
   993                           
   994                           ;main.c: 211: else if (message == '1')
   995  000F4A  0E31               	movlw	49
   996  000F4C  182F               	xorwf	main@message,w,c
   997  000F4E  A4D8               	btfss	status,2,c
   998  000F50  D015               	goto	l1765
   999                           
  1000                           ;main.c: 212: {
  1001                           ;main.c: 213: FORW = 0;
  1002  000F52  0E00               	movlw	0
  1003  000F54  6E37               	movwf	_FORW,c
  1004                           
  1005                           ;main.c: 214: BACK = 0;
  1006  000F56  0E00               	movlw	0
  1007  000F58  6E34               	movwf	_BACK,c
  1008                           
  1009                           ;main.c: 215: EXTEND = 0;
  1010  000F5A  0E00               	movlw	0
  1011  000F5C  6E36               	movwf	_EXTEND,c
  1012                           
  1013                           ;main.c: 216: RETRACT = 0;
  1014  000F5E  0E00               	movlw	0
  1015  000F60  6E38               	movwf	_RETRACT,c
  1016                           
  1017                           ;main.c: 217: CUSTOM = 1;
  1018  000F62  0E01               	movlw	1
  1019  000F64  6E35               	movwf	_CUSTOM,c
  1020                           
  1021                           ;main.c: 219: newPos = 50;
  1022  000F66  0E00               	movlw	0
  1023  000F68  6E2E               	movwf	main@newPos+1,c
  1024  000F6A  0E32               	movlw	50
  1025  000F6C  6E2D               	movwf	main@newPos,c
  1026                           
  1027                           ;main.c: 220: uart_write_text("Command Sent (Array Custom)\r\n");
  1028  000F6E  0E81               	movlw	low STR_5
  1029  000F70  6E02               	movwf	uart_write_text@text,c
  1030  000F72  0E0D               	movlw	high STR_5
  1031  000F74  6E03               	movwf	uart_write_text@text+1,c
  1032  000F76  ECB9  F00D         	call	_uart_write_text	;wreg free
  1033                           
  1034                           ;main.c: 221: }
  1035  000F7A  D0C7               	goto	l1813
  1036  000F7C                     l1765:
  1037                           
  1038                           ;main.c: 222: else if (message == '2')
  1039  000F7C  0E32               	movlw	50
  1040  000F7E  182F               	xorwf	main@message,w,c
  1041  000F80  A4D8               	btfss	status,2,c
  1042  000F82  D015               	goto	l1771
  1043                           
  1044                           ;main.c: 223: {
  1045                           ;main.c: 224: FORW = 0;
  1046  000F84  0E00               	movlw	0
  1047  000F86  6E37               	movwf	_FORW,c
  1048                           
  1049                           ;main.c: 225: BACK = 0;
  1050  000F88  0E00               	movlw	0
  1051  000F8A  6E34               	movwf	_BACK,c
  1052                           
  1053                           ;main.c: 226: EXTEND = 0;
  1054  000F8C  0E00               	movlw	0
  1055  000F8E  6E36               	movwf	_EXTEND,c
  1056                           
  1057                           ;main.c: 227: RETRACT = 0;
  1058  000F90  0E00               	movlw	0
  1059  000F92  6E38               	movwf	_RETRACT,c
  1060                           
  1061                           ;main.c: 228: CUSTOM = 1;
  1062  000F94  0E01               	movlw	1
  1063  000F96  6E35               	movwf	_CUSTOM,c
  1064                           
  1065                           ;main.c: 230: newPos = 100;
  1066  000F98  0E00               	movlw	0
  1067  000F9A  6E2E               	movwf	main@newPos+1,c
  1068  000F9C  0E64               	movlw	100
  1069  000F9E  6E2D               	movwf	main@newPos,c
  1070                           
  1071                           ;main.c: 231: uart_write_text("Command Sent (Array Custom)\r\n");
  1072  000FA0  0E81               	movlw	low STR_5
  1073  000FA2  6E02               	movwf	uart_write_text@text,c
  1074  000FA4  0E0D               	movlw	high STR_5
  1075  000FA6  6E03               	movwf	uart_write_text@text+1,c
  1076  000FA8  ECB9  F00D         	call	_uart_write_text	;wreg free
  1077                           
  1078                           ;main.c: 232: }
  1079  000FAC  D0AE               	goto	l1813
  1080  000FAE                     l1771:
  1081                           
  1082                           ;main.c: 233: else if (message == '3')
  1083  000FAE  0E33               	movlw	51
  1084  000FB0  182F               	xorwf	main@message,w,c
  1085  000FB2  A4D8               	btfss	status,2,c
  1086  000FB4  D015               	goto	l1777
  1087                           
  1088                           ;main.c: 234: {
  1089                           ;main.c: 235: FORW = 0;
  1090  000FB6  0E00               	movlw	0
  1091  000FB8  6E37               	movwf	_FORW,c
  1092                           
  1093                           ;main.c: 236: BACK = 0;
  1094  000FBA  0E00               	movlw	0
  1095  000FBC  6E34               	movwf	_BACK,c
  1096                           
  1097                           ;main.c: 237: EXTEND = 0;
  1098  000FBE  0E00               	movlw	0
  1099  000FC0  6E36               	movwf	_EXTEND,c
  1100                           
  1101                           ;main.c: 238: RETRACT = 0;
  1102  000FC2  0E00               	movlw	0
  1103  000FC4  6E38               	movwf	_RETRACT,c
  1104                           
  1105                           ;main.c: 239: CUSTOM = 1;
  1106  000FC6  0E01               	movlw	1
  1107  000FC8  6E35               	movwf	_CUSTOM,c
  1108                           
  1109                           ;main.c: 241: newPos = 150;
  1110  000FCA  0E00               	movlw	0
  1111  000FCC  6E2E               	movwf	main@newPos+1,c
  1112  000FCE  0E96               	movlw	150
  1113  000FD0  6E2D               	movwf	main@newPos,c
  1114                           
  1115                           ;main.c: 242: uart_write_text("Command Sent (Array Custom)\r\n");
  1116  000FD2  0E81               	movlw	low STR_5
  1117  000FD4  6E02               	movwf	uart_write_text@text,c
  1118  000FD6  0E0D               	movlw	high STR_5
  1119  000FD8  6E03               	movwf	uart_write_text@text+1,c
  1120  000FDA  ECB9  F00D         	call	_uart_write_text	;wreg free
  1121                           
  1122                           ;main.c: 243: }
  1123  000FDE  D095               	goto	l1813
  1124  000FE0                     l1777:
  1125                           
  1126                           ;main.c: 244: else if (message == '4')
  1127  000FE0  0E34               	movlw	52
  1128  000FE2  182F               	xorwf	main@message,w,c
  1129  000FE4  A4D8               	btfss	status,2,c
  1130  000FE6  D015               	goto	l1783
  1131                           
  1132                           ;main.c: 245: {
  1133                           ;main.c: 246: FORW = 0;
  1134  000FE8  0E00               	movlw	0
  1135  000FEA  6E37               	movwf	_FORW,c
  1136                           
  1137                           ;main.c: 247: BACK = 0;
  1138  000FEC  0E00               	movlw	0
  1139  000FEE  6E34               	movwf	_BACK,c
  1140                           
  1141                           ;main.c: 248: EXTEND = 0;
  1142  000FF0  0E00               	movlw	0
  1143  000FF2  6E36               	movwf	_EXTEND,c
  1144                           
  1145                           ;main.c: 249: RETRACT = 0;
  1146  000FF4  0E00               	movlw	0
  1147  000FF6  6E38               	movwf	_RETRACT,c
  1148                           
  1149                           ;main.c: 250: CUSTOM = 1;
  1150  000FF8  0E01               	movlw	1
  1151  000FFA  6E35               	movwf	_CUSTOM,c
  1152                           
  1153                           ;main.c: 252: newPos = 200;
  1154  000FFC  0E00               	movlw	0
  1155  000FFE  6E2E               	movwf	main@newPos+1,c
  1156  001000  0EC8               	movlw	200
  1157  001002  6E2D               	movwf	main@newPos,c
  1158                           
  1159                           ;main.c: 253: uart_write_text("Command Sent (Array Custom)\r\n");
  1160  001004  0E81               	movlw	low STR_5
  1161  001006  6E02               	movwf	uart_write_text@text,c
  1162  001008  0E0D               	movlw	high STR_5
  1163  00100A  6E03               	movwf	uart_write_text@text+1,c
  1164  00100C  ECB9  F00D         	call	_uart_write_text	;wreg free
  1165                           
  1166                           ;main.c: 254: }
  1167  001010  D07C               	goto	l1813
  1168  001012                     l1783:
  1169                           
  1170                           ;main.c: 255: else if (message == '5')
  1171  001012  0E35               	movlw	53
  1172  001014  182F               	xorwf	main@message,w,c
  1173  001016  A4D8               	btfss	status,2,c
  1174  001018  D015               	goto	l1789
  1175                           
  1176                           ;main.c: 256: {
  1177                           ;main.c: 257: FORW = 0;
  1178  00101A  0E00               	movlw	0
  1179  00101C  6E37               	movwf	_FORW,c
  1180                           
  1181                           ;main.c: 258: BACK = 0;
  1182  00101E  0E00               	movlw	0
  1183  001020  6E34               	movwf	_BACK,c
  1184                           
  1185                           ;main.c: 259: EXTEND = 0;
  1186  001022  0E00               	movlw	0
  1187  001024  6E36               	movwf	_EXTEND,c
  1188                           
  1189                           ;main.c: 260: RETRACT = 0;
  1190  001026  0E00               	movlw	0
  1191  001028  6E38               	movwf	_RETRACT,c
  1192                           
  1193                           ;main.c: 261: CUSTOM = 1;
  1194  00102A  0E01               	movlw	1
  1195  00102C  6E35               	movwf	_CUSTOM,c
  1196                           
  1197                           ;main.c: 263: newPos = 250;
  1198  00102E  0E00               	movlw	0
  1199  001030  6E2E               	movwf	main@newPos+1,c
  1200  001032  0EFA               	movlw	250
  1201  001034  6E2D               	movwf	main@newPos,c
  1202                           
  1203                           ;main.c: 264: uart_write_text("Command Sent (Array Custom)\r\n");
  1204  001036  0E81               	movlw	low STR_5
  1205  001038  6E02               	movwf	uart_write_text@text,c
  1206  00103A  0E0D               	movlw	high STR_5
  1207  00103C  6E03               	movwf	uart_write_text@text+1,c
  1208  00103E  ECB9  F00D         	call	_uart_write_text	;wreg free
  1209                           
  1210                           ;main.c: 265: }
  1211  001042  D063               	goto	l1813
  1212  001044                     l1789:
  1213                           
  1214                           ;main.c: 266: else if (message == '6')
  1215  001044  0E36               	movlw	54
  1216  001046  182F               	xorwf	main@message,w,c
  1217  001048  A4D8               	btfss	status,2,c
  1218  00104A  D015               	goto	l1795
  1219                           
  1220                           ;main.c: 267: {
  1221                           ;main.c: 268: FORW = 0;
  1222  00104C  0E00               	movlw	0
  1223  00104E  6E37               	movwf	_FORW,c
  1224                           
  1225                           ;main.c: 269: BACK = 0;
  1226  001050  0E00               	movlw	0
  1227  001052  6E34               	movwf	_BACK,c
  1228                           
  1229                           ;main.c: 270: EXTEND = 0;
  1230  001054  0E00               	movlw	0
  1231  001056  6E36               	movwf	_EXTEND,c
  1232                           
  1233                           ;main.c: 271: RETRACT = 0;
  1234  001058  0E00               	movlw	0
  1235  00105A  6E38               	movwf	_RETRACT,c
  1236                           
  1237                           ;main.c: 272: CUSTOM = 1;
  1238  00105C  0E01               	movlw	1
  1239  00105E  6E35               	movwf	_CUSTOM,c
  1240                           
  1241                           ;main.c: 274: newPos = 300;
  1242  001060  0E01               	movlw	1
  1243  001062  6E2E               	movwf	main@newPos+1,c
  1244  001064  0E2C               	movlw	44
  1245  001066  6E2D               	movwf	main@newPos,c
  1246                           
  1247                           ;main.c: 275: uart_write_text("Command Sent (Array Custom)\r\n");
  1248  001068  0E81               	movlw	low STR_5
  1249  00106A  6E02               	movwf	uart_write_text@text,c
  1250  00106C  0E0D               	movlw	high STR_5
  1251  00106E  6E03               	movwf	uart_write_text@text+1,c
  1252  001070  ECB9  F00D         	call	_uart_write_text	;wreg free
  1253                           
  1254                           ;main.c: 276: }
  1255  001074  D04A               	goto	l1813
  1256  001076                     l1795:
  1257                           
  1258                           ;main.c: 277: else if (message == '7')
  1259  001076  0E37               	movlw	55
  1260  001078  182F               	xorwf	main@message,w,c
  1261  00107A  A4D8               	btfss	status,2,c
  1262  00107C  D015               	goto	l1801
  1263                           
  1264                           ;main.c: 278: {
  1265                           ;main.c: 279: FORW = 0;
  1266  00107E  0E00               	movlw	0
  1267  001080  6E37               	movwf	_FORW,c
  1268                           
  1269                           ;main.c: 280: BACK = 0;
  1270  001082  0E00               	movlw	0
  1271  001084  6E34               	movwf	_BACK,c
  1272                           
  1273                           ;main.c: 281: EXTEND = 0;
  1274  001086  0E00               	movlw	0
  1275  001088  6E36               	movwf	_EXTEND,c
  1276                           
  1277                           ;main.c: 282: RETRACT = 0;
  1278  00108A  0E00               	movlw	0
  1279  00108C  6E38               	movwf	_RETRACT,c
  1280                           
  1281                           ;main.c: 283: CUSTOM = 1;
  1282  00108E  0E01               	movlw	1
  1283  001090  6E35               	movwf	_CUSTOM,c
  1284                           
  1285                           ;main.c: 285: newPos = 350;
  1286  001092  0E01               	movlw	1
  1287  001094  6E2E               	movwf	main@newPos+1,c
  1288  001096  0E5E               	movlw	94
  1289  001098  6E2D               	movwf	main@newPos,c
  1290                           
  1291                           ;main.c: 286: uart_write_text("Command Sent (Array Custom)\r\n");
  1292  00109A  0E81               	movlw	low STR_5
  1293  00109C  6E02               	movwf	uart_write_text@text,c
  1294  00109E  0E0D               	movlw	high STR_5
  1295  0010A0  6E03               	movwf	uart_write_text@text+1,c
  1296  0010A2  ECB9  F00D         	call	_uart_write_text	;wreg free
  1297                           
  1298                           ;main.c: 287: }
  1299  0010A6  D031               	goto	l1813
  1300  0010A8                     l1801:
  1301                           
  1302                           ;main.c: 288: else if (message == '8')
  1303  0010A8  0E38               	movlw	56
  1304  0010AA  182F               	xorwf	main@message,w,c
  1305  0010AC  A4D8               	btfss	status,2,c
  1306  0010AE  D015               	goto	l1807
  1307                           
  1308                           ;main.c: 289: {
  1309                           ;main.c: 290: FORW = 0;
  1310  0010B0  0E00               	movlw	0
  1311  0010B2  6E37               	movwf	_FORW,c
  1312                           
  1313                           ;main.c: 291: BACK = 0;
  1314  0010B4  0E00               	movlw	0
  1315  0010B6  6E34               	movwf	_BACK,c
  1316                           
  1317                           ;main.c: 292: EXTEND = 0;
  1318  0010B8  0E00               	movlw	0
  1319  0010BA  6E36               	movwf	_EXTEND,c
  1320                           
  1321                           ;main.c: 293: RETRACT = 0;
  1322  0010BC  0E00               	movlw	0
  1323  0010BE  6E38               	movwf	_RETRACT,c
  1324                           
  1325                           ;main.c: 294: CUSTOM = 1;
  1326  0010C0  0E01               	movlw	1
  1327  0010C2  6E35               	movwf	_CUSTOM,c
  1328                           
  1329                           ;main.c: 296: newPos = 400;
  1330  0010C4  0E01               	movlw	1
  1331  0010C6  6E2E               	movwf	main@newPos+1,c
  1332  0010C8  0E90               	movlw	144
  1333  0010CA  6E2D               	movwf	main@newPos,c
  1334                           
  1335                           ;main.c: 297: uart_write_text("Command Sent (Array Custom)\r\n");
  1336  0010CC  0E81               	movlw	low STR_5
  1337  0010CE  6E02               	movwf	uart_write_text@text,c
  1338  0010D0  0E0D               	movlw	high STR_5
  1339  0010D2  6E03               	movwf	uart_write_text@text+1,c
  1340  0010D4  ECB9  F00D         	call	_uart_write_text	;wreg free
  1341                           
  1342                           ;main.c: 298: }
  1343  0010D8  D018               	goto	l1813
  1344  0010DA                     l1807:
  1345                           
  1346                           ;main.c: 299: else if (message == '9')
  1347  0010DA  0E39               	movlw	57
  1348  0010DC  182F               	xorwf	main@message,w,c
  1349  0010DE  A4D8               	btfss	status,2,c
  1350  0010E0  D014               	goto	l1813
  1351                           
  1352                           ;main.c: 300: {
  1353                           ;main.c: 301: FORW = 0;
  1354  0010E2  0E00               	movlw	0
  1355  0010E4  6E37               	movwf	_FORW,c
  1356                           
  1357                           ;main.c: 302: BACK = 0;
  1358  0010E6  0E00               	movlw	0
  1359  0010E8  6E34               	movwf	_BACK,c
  1360                           
  1361                           ;main.c: 303: EXTEND = 0;
  1362  0010EA  0E00               	movlw	0
  1363  0010EC  6E36               	movwf	_EXTEND,c
  1364                           
  1365                           ;main.c: 304: RETRACT = 0;
  1366  0010EE  0E00               	movlw	0
  1367  0010F0  6E38               	movwf	_RETRACT,c
  1368                           
  1369                           ;main.c: 305: CUSTOM = 1;
  1370  0010F2  0E01               	movlw	1
  1371  0010F4  6E35               	movwf	_CUSTOM,c
  1372                           
  1373                           ;main.c: 307: newPos = 450;
  1374  0010F6  0E01               	movlw	1
  1375  0010F8  6E2E               	movwf	main@newPos+1,c
  1376  0010FA  0EC2               	movlw	194
  1377  0010FC  6E2D               	movwf	main@newPos,c
  1378                           
  1379                           ;main.c: 308: uart_write_text("Command Sent (Array Custom)\r\n");
  1380  0010FE  0E81               	movlw	low STR_5
  1381  001100  6E02               	movwf	uart_write_text@text,c
  1382  001102  0E0D               	movlw	high STR_5
  1383  001104  6E03               	movwf	uart_write_text@text+1,c
  1384  001106  ECB9  F00D         	call	_uart_write_text	;wreg free
  1385  00110A                     l1813:
  1386                           
  1387                           ;main.c: 309: }
  1388                           ;main.c: 310: }
  1389                           ;main.c: 315: if(margin0 == 0){
  1390  00110A  5039               	movf	_margin0,w,c
  1391  00110C  103A               	iorwf	_margin0+1,w,c
  1392  00110E  A4D8               	btfss	status,2,c
  1393  001110  D008               	goto	l1819
  1394                           
  1395                           ;main.c: 317: selectAN0();
  1396  001112  EC70  F00E         	call	_selectAN0	;wreg free
  1397                           
  1398                           ;main.c: 318: actuator0 = readADC();
  1399  001116  EC24  F00E         	call	_readADC	;wreg free
  1400  00111A  C001  F01D         	movff	?_readADC,main@actuator0
  1401  00111E  C002  F01E         	movff	?_readADC+1,main@actuator0+1
  1402  001122                     l1819:
  1403                           
  1404                           ;main.c: 319: }
  1405                           ;main.c: 320: if(margin1 == 0){
  1406  001122  503B               	movf	_margin1,w,c
  1407  001124  103C               	iorwf	_margin1+1,w,c
  1408  001126  A4D8               	btfss	status,2,c
  1409  001128  D008               	goto	l1823
  1410                           
  1411                           ;main.c: 323: selectAN1();
  1412  00112A  EC6B  F00E         	call	_selectAN1	;wreg free
  1413                           
  1414                           ;main.c: 324: actuator1 = readADC();
  1415  00112E  EC24  F00E         	call	_readADC	;wreg free
  1416  001132  C001  F01F         	movff	?_readADC,main@actuator1
  1417  001136  C002  F020         	movff	?_readADC+1,main@actuator1+1
  1418  00113A                     l1823:
  1419                           
  1420                           ;main.c: 325: }
  1421                           ;main.c: 326: if(margin2 == 0){
  1422  00113A  503D               	movf	_margin2,w,c
  1423  00113C  103E               	iorwf	_margin2+1,w,c
  1424  00113E  A4D8               	btfss	status,2,c
  1425  001140  D008               	goto	l1827
  1426                           
  1427                           ;main.c: 329: selectAN2();
  1428  001142  EC66  F00E         	call	_selectAN2	;wreg free
  1429                           
  1430                           ;main.c: 330: actuator2 = readADC();
  1431  001146  EC24  F00E         	call	_readADC	;wreg free
  1432  00114A  C001  F021         	movff	?_readADC,main@actuator2
  1433  00114E  C002  F022         	movff	?_readADC+1,main@actuator2+1
  1434  001152                     l1827:
  1435                           
  1436                           ;main.c: 331: }
  1437                           ;main.c: 332: if(margin3 == 0){
  1438  001152  503F               	movf	_margin3,w,c
  1439  001154  1040               	iorwf	_margin3+1,w,c
  1440  001156  A4D8               	btfss	status,2,c
  1441  001158  D008               	goto	l1831
  1442                           
  1443                           ;main.c: 335: selectAN3();
  1444  00115A  EC61  F00E         	call	_selectAN3	;wreg free
  1445                           
  1446                           ;main.c: 336: actuator3 = readADC();
  1447  00115E  EC24  F00E         	call	_readADC	;wreg free
  1448  001162  C001  F023         	movff	?_readADC,main@actuator3
  1449  001166  C002  F024         	movff	?_readADC+1,main@actuator3+1
  1450  00116A                     l1831:
  1451                           
  1452                           ;main.c: 337: }
  1453                           ;main.c: 339: if(margin4 == 0){
  1454  00116A  5041               	movf	_margin4,w,c
  1455  00116C  1042               	iorwf	_margin4+1,w,c
  1456  00116E  A4D8               	btfss	status,2,c
  1457  001170  D008               	goto	l1835
  1458                           
  1459                           ;main.c: 342: selectAN4();
  1460  001172  EC5C  F00E         	call	_selectAN4	;wreg free
  1461                           
  1462                           ;main.c: 343: actuator4 = readADC();
  1463  001176  EC24  F00E         	call	_readADC	;wreg free
  1464  00117A  C001  F025         	movff	?_readADC,main@actuator4
  1465  00117E  C002  F026         	movff	?_readADC+1,main@actuator4+1
  1466  001182                     l1835:
  1467                           
  1468                           ;main.c: 344: }
  1469                           ;main.c: 345: if(margin5 == 0){
  1470  001182  5043               	movf	_margin5,w,c
  1471  001184  1044               	iorwf	_margin5+1,w,c
  1472  001186  A4D8               	btfss	status,2,c
  1473  001188  D008               	goto	l1839
  1474                           
  1475                           ;main.c: 348: selectAN5();
  1476  00118A  EC57  F00E         	call	_selectAN5	;wreg free
  1477                           
  1478                           ;main.c: 349: actuator5 = readADC();
  1479  00118E  EC24  F00E         	call	_readADC	;wreg free
  1480  001192  C001  F027         	movff	?_readADC,main@actuator5
  1481  001196  C002  F028         	movff	?_readADC+1,main@actuator5+1
  1482  00119A                     l1839:
  1483                           
  1484                           ;main.c: 350: }
  1485                           ;main.c: 352: if(margin6 == 0){
  1486  00119A  5045               	movf	_margin6,w,c
  1487  00119C  1046               	iorwf	_margin6+1,w,c
  1488  00119E  A4D8               	btfss	status,2,c
  1489  0011A0  D008               	goto	l1843
  1490                           
  1491                           ;main.c: 355: selectAN6();
  1492  0011A2  EC52  F00E         	call	_selectAN6	;wreg free
  1493                           
  1494                           ;main.c: 356: actuator6 = readADC();
  1495  0011A6  EC24  F00E         	call	_readADC	;wreg free
  1496  0011AA  C001  F029         	movff	?_readADC,main@actuator6
  1497  0011AE  C002  F02A         	movff	?_readADC+1,main@actuator6+1
  1498  0011B2                     l1843:
  1499                           
  1500                           ;main.c: 357: }
  1501                           ;main.c: 358: if(margin7 == 0){
  1502  0011B2  5047               	movf	_margin7,w,c
  1503  0011B4  1048               	iorwf	_margin7+1,w,c
  1504  0011B6  A4D8               	btfss	status,2,c
  1505  0011B8  D008               	goto	l1847
  1506                           
  1507                           ;main.c: 361: selectAN7();
  1508  0011BA  EC4D  F00E         	call	_selectAN7	;wreg free
  1509                           
  1510                           ;main.c: 362: actuator7 = readADC();
  1511  0011BE  EC24  F00E         	call	_readADC	;wreg free
  1512  0011C2  C001  F02B         	movff	?_readADC,main@actuator7
  1513  0011C6  C002  F02C         	movff	?_readADC+1,main@actuator7+1
  1514  0011CA                     l1847:
  1515                           
  1516                           ;main.c: 363: }
  1517                           ;main.c: 366: if(FORW == 1 && BACK == 0 && EXTEND == 0 && RETRACT == 0)
  1518  0011CA  0437               	decf	_FORW,w,c
  1519  0011CC  A4D8               	btfss	status,2,c
  1520  0011CE  D09A               	goto	l1857
  1521  0011D0  5034               	movf	_BACK,w,c
  1522  0011D2  A4D8               	btfss	status,2,c
  1523  0011D4  D097               	goto	l1857
  1524  0011D6  5036               	movf	_EXTEND,w,c
  1525  0011D8  A4D8               	btfss	status,2,c
  1526  0011DA  D094               	goto	l1857
  1527  0011DC  5038               	movf	_RETRACT,w,c
  1528  0011DE  A4D8               	btfss	status,2,c
  1529  0011E0  D091               	goto	l1857
  1530                           
  1531                           ;main.c: 367: {
  1532                           ;main.c: 380: movement(actuator0, retractPos, 0, &margin0);
  1533  0011E2  C01D  F001         	movff	main@actuator0,movement@current_pos
  1534  0011E6  C01E  F002         	movff	main@actuator0+1,movement@current_pos+1
  1535  0011EA  C030  F003         	movff	main@retractPos,movement@set_point
  1536  0011EE  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  1537  0011F2  0E00               	movlw	0
  1538  0011F4  6E06               	movwf	movement@actuator+1,c
  1539  0011F6  0E00               	movlw	0
  1540  0011F8  6E05               	movwf	movement@actuator,c
  1541  0011FA  0E39               	movlw	low _margin0
  1542  0011FC  6E07               	movwf	movement@margin,c
  1543  0011FE  0E00               	movlw	high _margin0
  1544  001200  6E08               	movwf	movement@margin+1,c
  1545  001202  ECEF  F00B         	call	_movement	;wreg free
  1546                           
  1547                           ;main.c: 381: movement(actuator1, extendPos, 1, &margin1);
  1548  001206  C01F  F001         	movff	main@actuator1,movement@current_pos
  1549  00120A  C020  F002         	movff	main@actuator1+1,movement@current_pos+1
  1550  00120E  C032  F003         	movff	main@extendPos,movement@set_point
  1551  001212  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1552  001216  0E00               	movlw	0
  1553  001218  6E06               	movwf	movement@actuator+1,c
  1554  00121A  0E01               	movlw	1
  1555  00121C  6E05               	movwf	movement@actuator,c
  1556  00121E  0E3B               	movlw	low _margin1
  1557  001220  6E07               	movwf	movement@margin,c
  1558  001222  0E00               	movlw	high _margin1
  1559  001224  6E08               	movwf	movement@margin+1,c
  1560  001226  ECEF  F00B         	call	_movement	;wreg free
  1561                           
  1562                           ;main.c: 382: movement(actuator2, retractPos, 2, &margin2);
  1563  00122A  C021  F001         	movff	main@actuator2,movement@current_pos
  1564  00122E  C022  F002         	movff	main@actuator2+1,movement@current_pos+1
  1565  001232  C030  F003         	movff	main@retractPos,movement@set_point
  1566  001236  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  1567  00123A  0E00               	movlw	0
  1568  00123C  6E06               	movwf	movement@actuator+1,c
  1569  00123E  0E02               	movlw	2
  1570  001240  6E05               	movwf	movement@actuator,c
  1571  001242  0E3D               	movlw	low _margin2
  1572  001244  6E07               	movwf	movement@margin,c
  1573  001246  0E00               	movlw	high _margin2
  1574  001248  6E08               	movwf	movement@margin+1,c
  1575  00124A  ECEF  F00B         	call	_movement	;wreg free
  1576                           
  1577                           ;main.c: 383: movement(actuator3, extendPos, 3, &margin3);
  1578  00124E  C023  F001         	movff	main@actuator3,movement@current_pos
  1579  001252  C024  F002         	movff	main@actuator3+1,movement@current_pos+1
  1580  001256  C032  F003         	movff	main@extendPos,movement@set_point
  1581  00125A  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1582  00125E  0E00               	movlw	0
  1583  001260  6E06               	movwf	movement@actuator+1,c
  1584  001262  0E03               	movlw	3
  1585  001264  6E05               	movwf	movement@actuator,c
  1586  001266  0E3F               	movlw	low _margin3
  1587  001268  6E07               	movwf	movement@margin,c
  1588  00126A  0E00               	movlw	high _margin3
  1589  00126C  6E08               	movwf	movement@margin+1,c
  1590  00126E  ECEF  F00B         	call	_movement	;wreg free
  1591                           
  1592                           ;main.c: 384: movement(actuator4, extendPos, 4, &margin4);
  1593  001272  C025  F001         	movff	main@actuator4,movement@current_pos
  1594  001276  C026  F002         	movff	main@actuator4+1,movement@current_pos+1
  1595  00127A  C032  F003         	movff	main@extendPos,movement@set_point
  1596  00127E  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1597  001282  0E00               	movlw	0
  1598  001284  6E06               	movwf	movement@actuator+1,c
  1599  001286  0E04               	movlw	4
  1600  001288  6E05               	movwf	movement@actuator,c
  1601  00128A  0E41               	movlw	low _margin4
  1602  00128C  6E07               	movwf	movement@margin,c
  1603  00128E  0E00               	movlw	high _margin4
  1604  001290  6E08               	movwf	movement@margin+1,c
  1605  001292  ECEF  F00B         	call	_movement	;wreg free
  1606                           
  1607                           ;main.c: 385: movement(actuator5, retractPos, 5, &margin5);
  1608  001296  C027  F001         	movff	main@actuator5,movement@current_pos
  1609  00129A  C028  F002         	movff	main@actuator5+1,movement@current_pos+1
  1610  00129E  C030  F003         	movff	main@retractPos,movement@set_point
  1611  0012A2  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  1612  0012A6  0E00               	movlw	0
  1613  0012A8  6E06               	movwf	movement@actuator+1,c
  1614  0012AA  0E05               	movlw	5
  1615  0012AC  6E05               	movwf	movement@actuator,c
  1616  0012AE  0E43               	movlw	low _margin5
  1617  0012B0  6E07               	movwf	movement@margin,c
  1618  0012B2  0E00               	movlw	high _margin5
  1619  0012B4  6E08               	movwf	movement@margin+1,c
  1620  0012B6  ECEF  F00B         	call	_movement	;wreg free
  1621                           
  1622                           ;main.c: 386: movement(actuator6, extendPos, 6, &margin6);
  1623  0012BA  C029  F001         	movff	main@actuator6,movement@current_pos
  1624  0012BE  C02A  F002         	movff	main@actuator6+1,movement@current_pos+1
  1625  0012C2  C032  F003         	movff	main@extendPos,movement@set_point
  1626  0012C6  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1627  0012CA  0E00               	movlw	0
  1628  0012CC  6E06               	movwf	movement@actuator+1,c
  1629  0012CE  0E06               	movlw	6
  1630  0012D0  6E05               	movwf	movement@actuator,c
  1631  0012D2  0E45               	movlw	low _margin6
  1632  0012D4  6E07               	movwf	movement@margin,c
  1633  0012D6  0E00               	movlw	high _margin6
  1634  0012D8  6E08               	movwf	movement@margin+1,c
  1635  0012DA  ECEF  F00B         	call	_movement	;wreg free
  1636                           
  1637                           ;main.c: 387: movement(actuator7, retractPos, 7, &margin7);
  1638  0012DE  C02B  F001         	movff	main@actuator7,movement@current_pos
  1639  0012E2  C02C  F002         	movff	main@actuator7+1,movement@current_pos+1
  1640  0012E6  C030  F003         	movff	main@retractPos,movement@set_point
  1641  0012EA  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  1642  0012EE  0E00               	movlw	0
  1643  0012F0  6E06               	movwf	movement@actuator+1,c
  1644  0012F2  0E07               	movlw	7
  1645  0012F4  6E05               	movwf	movement@actuator,c
  1646  0012F6  0E47               	movlw	low _margin7
  1647  0012F8  6E07               	movwf	movement@margin,c
  1648  0012FA  0E00               	movlw	high _margin7
  1649  0012FC  6E08               	movwf	movement@margin+1,c
  1650  0012FE  ECEF  F00B         	call	_movement	;wreg free
  1651                           
  1652                           ;main.c: 390: } else if(BACK == 1 && FORW == 0 && EXTEND == 0 && RETRACT == 0) {
  1653  001302  D58D               	goto	l67
  1654  001304                     l1857:
  1655  001304  0434               	decf	_BACK,w,c
  1656  001306  A4D8               	btfss	status,2,c
  1657  001308  D09A               	goto	l1867
  1658  00130A  5037               	movf	_FORW,w,c
  1659  00130C  A4D8               	btfss	status,2,c
  1660  00130E  D097               	goto	l1867
  1661  001310  5036               	movf	_EXTEND,w,c
  1662  001312  A4D8               	btfss	status,2,c
  1663  001314  D094               	goto	l1867
  1664  001316  5038               	movf	_RETRACT,w,c
  1665  001318  A4D8               	btfss	status,2,c
  1666  00131A  D091               	goto	l1867
  1667                           
  1668                           ;main.c: 398: movement(actuator0, extendPos, 0, &margin0);
  1669  00131C  C01D  F001         	movff	main@actuator0,movement@current_pos
  1670  001320  C01E  F002         	movff	main@actuator0+1,movement@current_pos+1
  1671  001324  C032  F003         	movff	main@extendPos,movement@set_point
  1672  001328  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1673  00132C  0E00               	movlw	0
  1674  00132E  6E06               	movwf	movement@actuator+1,c
  1675  001330  0E00               	movlw	0
  1676  001332  6E05               	movwf	movement@actuator,c
  1677  001334  0E39               	movlw	low _margin0
  1678  001336  6E07               	movwf	movement@margin,c
  1679  001338  0E00               	movlw	high _margin0
  1680  00133A  6E08               	movwf	movement@margin+1,c
  1681  00133C  ECEF  F00B         	call	_movement	;wreg free
  1682                           
  1683                           ;main.c: 399: movement(actuator1, retractPos, 1, &margin1);
  1684  001340  C01F  F001         	movff	main@actuator1,movement@current_pos
  1685  001344  C020  F002         	movff	main@actuator1+1,movement@current_pos+1
  1686  001348  C030  F003         	movff	main@retractPos,movement@set_point
  1687  00134C  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  1688  001350  0E00               	movlw	0
  1689  001352  6E06               	movwf	movement@actuator+1,c
  1690  001354  0E01               	movlw	1
  1691  001356  6E05               	movwf	movement@actuator,c
  1692  001358  0E3B               	movlw	low _margin1
  1693  00135A  6E07               	movwf	movement@margin,c
  1694  00135C  0E00               	movlw	high _margin1
  1695  00135E  6E08               	movwf	movement@margin+1,c
  1696  001360  ECEF  F00B         	call	_movement	;wreg free
  1697                           
  1698                           ;main.c: 400: movement(actuator2, extendPos, 2, &margin2);
  1699  001364  C021  F001         	movff	main@actuator2,movement@current_pos
  1700  001368  C022  F002         	movff	main@actuator2+1,movement@current_pos+1
  1701  00136C  C032  F003         	movff	main@extendPos,movement@set_point
  1702  001370  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1703  001374  0E00               	movlw	0
  1704  001376  6E06               	movwf	movement@actuator+1,c
  1705  001378  0E02               	movlw	2
  1706  00137A  6E05               	movwf	movement@actuator,c
  1707  00137C  0E3D               	movlw	low _margin2
  1708  00137E  6E07               	movwf	movement@margin,c
  1709  001380  0E00               	movlw	high _margin2
  1710  001382  6E08               	movwf	movement@margin+1,c
  1711  001384  ECEF  F00B         	call	_movement	;wreg free
  1712                           
  1713                           ;main.c: 401: movement(actuator3, retractPos, 3, &margin3);
  1714  001388  C023  F001         	movff	main@actuator3,movement@current_pos
  1715  00138C  C024  F002         	movff	main@actuator3+1,movement@current_pos+1
  1716  001390  C030  F003         	movff	main@retractPos,movement@set_point
  1717  001394  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  1718  001398  0E00               	movlw	0
  1719  00139A  6E06               	movwf	movement@actuator+1,c
  1720  00139C  0E03               	movlw	3
  1721  00139E  6E05               	movwf	movement@actuator,c
  1722  0013A0  0E3F               	movlw	low _margin3
  1723  0013A2  6E07               	movwf	movement@margin,c
  1724  0013A4  0E00               	movlw	high _margin3
  1725  0013A6  6E08               	movwf	movement@margin+1,c
  1726  0013A8  ECEF  F00B         	call	_movement	;wreg free
  1727                           
  1728                           ;main.c: 402: movement(actuator4, retractPos, 4, &margin4);
  1729  0013AC  C025  F001         	movff	main@actuator4,movement@current_pos
  1730  0013B0  C026  F002         	movff	main@actuator4+1,movement@current_pos+1
  1731  0013B4  C030  F003         	movff	main@retractPos,movement@set_point
  1732  0013B8  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  1733  0013BC  0E00               	movlw	0
  1734  0013BE  6E06               	movwf	movement@actuator+1,c
  1735  0013C0  0E04               	movlw	4
  1736  0013C2  6E05               	movwf	movement@actuator,c
  1737  0013C4  0E41               	movlw	low _margin4
  1738  0013C6  6E07               	movwf	movement@margin,c
  1739  0013C8  0E00               	movlw	high _margin4
  1740  0013CA  6E08               	movwf	movement@margin+1,c
  1741  0013CC  ECEF  F00B         	call	_movement	;wreg free
  1742                           
  1743                           ;main.c: 403: movement(actuator5, extendPos, 5, &margin5);
  1744  0013D0  C027  F001         	movff	main@actuator5,movement@current_pos
  1745  0013D4  C028  F002         	movff	main@actuator5+1,movement@current_pos+1
  1746  0013D8  C032  F003         	movff	main@extendPos,movement@set_point
  1747  0013DC  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1748  0013E0  0E00               	movlw	0
  1749  0013E2  6E06               	movwf	movement@actuator+1,c
  1750  0013E4  0E05               	movlw	5
  1751  0013E6  6E05               	movwf	movement@actuator,c
  1752  0013E8  0E43               	movlw	low _margin5
  1753  0013EA  6E07               	movwf	movement@margin,c
  1754  0013EC  0E00               	movlw	high _margin5
  1755  0013EE  6E08               	movwf	movement@margin+1,c
  1756  0013F0  ECEF  F00B         	call	_movement	;wreg free
  1757                           
  1758                           ;main.c: 404: movement(actuator6, retractPos, 6, &margin6);
  1759  0013F4  C029  F001         	movff	main@actuator6,movement@current_pos
  1760  0013F8  C02A  F002         	movff	main@actuator6+1,movement@current_pos+1
  1761  0013FC  C030  F003         	movff	main@retractPos,movement@set_point
  1762  001400  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  1763  001404  0E00               	movlw	0
  1764  001406  6E06               	movwf	movement@actuator+1,c
  1765  001408  0E06               	movlw	6
  1766  00140A  6E05               	movwf	movement@actuator,c
  1767  00140C  0E45               	movlw	low _margin6
  1768  00140E  6E07               	movwf	movement@margin,c
  1769  001410  0E00               	movlw	high _margin6
  1770  001412  6E08               	movwf	movement@margin+1,c
  1771  001414  ECEF  F00B         	call	_movement	;wreg free
  1772                           
  1773                           ;main.c: 405: movement(actuator7, extendPos, 7, &margin7);
  1774  001418  C02B  F001         	movff	main@actuator7,movement@current_pos
  1775  00141C  C02C  F002         	movff	main@actuator7+1,movement@current_pos+1
  1776  001420  C032  F003         	movff	main@extendPos,movement@set_point
  1777  001424  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1778  001428  0E00               	movlw	0
  1779  00142A  6E06               	movwf	movement@actuator+1,c
  1780  00142C  0E07               	movlw	7
  1781  00142E  6E05               	movwf	movement@actuator,c
  1782  001430  0E47               	movlw	low _margin7
  1783  001432  6E07               	movwf	movement@margin,c
  1784  001434  0E00               	movlw	high _margin7
  1785  001436  6E08               	movwf	movement@margin+1,c
  1786  001438  ECEF  F00B         	call	_movement	;wreg free
  1787                           
  1788                           ;main.c: 408: } else if (FORW == 0 && BACK == 0 && EXTEND == 1 && RETRACT == 0){
  1789  00143C  D4F0               	goto	l67
  1790  00143E                     l1867:
  1791  00143E  5037               	movf	_FORW,w,c
  1792  001440  A4D8               	btfss	status,2,c
  1793  001442  D09A               	goto	l1877
  1794  001444  5034               	movf	_BACK,w,c
  1795  001446  A4D8               	btfss	status,2,c
  1796  001448  D097               	goto	l1877
  1797  00144A  0436               	decf	_EXTEND,w,c
  1798  00144C  A4D8               	btfss	status,2,c
  1799  00144E  D094               	goto	l1877
  1800  001450  5038               	movf	_RETRACT,w,c
  1801  001452  A4D8               	btfss	status,2,c
  1802  001454  D091               	goto	l1877
  1803                           
  1804                           ;main.c: 413: movement(actuator0, extendPos, 0, &margin0);
  1805  001456  C01D  F001         	movff	main@actuator0,movement@current_pos
  1806  00145A  C01E  F002         	movff	main@actuator0+1,movement@current_pos+1
  1807  00145E  C032  F003         	movff	main@extendPos,movement@set_point
  1808  001462  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1809  001466  0E00               	movlw	0
  1810  001468  6E06               	movwf	movement@actuator+1,c
  1811  00146A  0E00               	movlw	0
  1812  00146C  6E05               	movwf	movement@actuator,c
  1813  00146E  0E39               	movlw	low _margin0
  1814  001470  6E07               	movwf	movement@margin,c
  1815  001472  0E00               	movlw	high _margin0
  1816  001474  6E08               	movwf	movement@margin+1,c
  1817  001476  ECEF  F00B         	call	_movement	;wreg free
  1818                           
  1819                           ;main.c: 414: movement(actuator1, extendPos, 1, &margin1);
  1820  00147A  C01F  F001         	movff	main@actuator1,movement@current_pos
  1821  00147E  C020  F002         	movff	main@actuator1+1,movement@current_pos+1
  1822  001482  C032  F003         	movff	main@extendPos,movement@set_point
  1823  001486  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1824  00148A  0E00               	movlw	0
  1825  00148C  6E06               	movwf	movement@actuator+1,c
  1826  00148E  0E01               	movlw	1
  1827  001490  6E05               	movwf	movement@actuator,c
  1828  001492  0E3B               	movlw	low _margin1
  1829  001494  6E07               	movwf	movement@margin,c
  1830  001496  0E00               	movlw	high _margin1
  1831  001498  6E08               	movwf	movement@margin+1,c
  1832  00149A  ECEF  F00B         	call	_movement	;wreg free
  1833                           
  1834                           ;main.c: 415: movement(actuator2, extendPos, 2, &margin2);
  1835  00149E  C021  F001         	movff	main@actuator2,movement@current_pos
  1836  0014A2  C022  F002         	movff	main@actuator2+1,movement@current_pos+1
  1837  0014A6  C032  F003         	movff	main@extendPos,movement@set_point
  1838  0014AA  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1839  0014AE  0E00               	movlw	0
  1840  0014B0  6E06               	movwf	movement@actuator+1,c
  1841  0014B2  0E02               	movlw	2
  1842  0014B4  6E05               	movwf	movement@actuator,c
  1843  0014B6  0E3D               	movlw	low _margin2
  1844  0014B8  6E07               	movwf	movement@margin,c
  1845  0014BA  0E00               	movlw	high _margin2
  1846  0014BC  6E08               	movwf	movement@margin+1,c
  1847  0014BE  ECEF  F00B         	call	_movement	;wreg free
  1848                           
  1849                           ;main.c: 416: movement(actuator3, extendPos, 3, &margin3);
  1850  0014C2  C023  F001         	movff	main@actuator3,movement@current_pos
  1851  0014C6  C024  F002         	movff	main@actuator3+1,movement@current_pos+1
  1852  0014CA  C032  F003         	movff	main@extendPos,movement@set_point
  1853  0014CE  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1854  0014D2  0E00               	movlw	0
  1855  0014D4  6E06               	movwf	movement@actuator+1,c
  1856  0014D6  0E03               	movlw	3
  1857  0014D8  6E05               	movwf	movement@actuator,c
  1858  0014DA  0E3F               	movlw	low _margin3
  1859  0014DC  6E07               	movwf	movement@margin,c
  1860  0014DE  0E00               	movlw	high _margin3
  1861  0014E0  6E08               	movwf	movement@margin+1,c
  1862  0014E2  ECEF  F00B         	call	_movement	;wreg free
  1863                           
  1864                           ;main.c: 417: movement(actuator4, extendPos, 4, &margin4);
  1865  0014E6  C025  F001         	movff	main@actuator4,movement@current_pos
  1866  0014EA  C026  F002         	movff	main@actuator4+1,movement@current_pos+1
  1867  0014EE  C032  F003         	movff	main@extendPos,movement@set_point
  1868  0014F2  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1869  0014F6  0E00               	movlw	0
  1870  0014F8  6E06               	movwf	movement@actuator+1,c
  1871  0014FA  0E04               	movlw	4
  1872  0014FC  6E05               	movwf	movement@actuator,c
  1873  0014FE  0E41               	movlw	low _margin4
  1874  001500  6E07               	movwf	movement@margin,c
  1875  001502  0E00               	movlw	high _margin4
  1876  001504  6E08               	movwf	movement@margin+1,c
  1877  001506  ECEF  F00B         	call	_movement	;wreg free
  1878                           
  1879                           ;main.c: 418: movement(actuator5, extendPos, 5, &margin5);
  1880  00150A  C027  F001         	movff	main@actuator5,movement@current_pos
  1881  00150E  C028  F002         	movff	main@actuator5+1,movement@current_pos+1
  1882  001512  C032  F003         	movff	main@extendPos,movement@set_point
  1883  001516  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1884  00151A  0E00               	movlw	0
  1885  00151C  6E06               	movwf	movement@actuator+1,c
  1886  00151E  0E05               	movlw	5
  1887  001520  6E05               	movwf	movement@actuator,c
  1888  001522  0E43               	movlw	low _margin5
  1889  001524  6E07               	movwf	movement@margin,c
  1890  001526  0E00               	movlw	high _margin5
  1891  001528  6E08               	movwf	movement@margin+1,c
  1892  00152A  ECEF  F00B         	call	_movement	;wreg free
  1893                           
  1894                           ;main.c: 419: movement(actuator6, extendPos, 6, &margin6);
  1895  00152E  C029  F001         	movff	main@actuator6,movement@current_pos
  1896  001532  C02A  F002         	movff	main@actuator6+1,movement@current_pos+1
  1897  001536  C032  F003         	movff	main@extendPos,movement@set_point
  1898  00153A  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1899  00153E  0E00               	movlw	0
  1900  001540  6E06               	movwf	movement@actuator+1,c
  1901  001542  0E06               	movlw	6
  1902  001544  6E05               	movwf	movement@actuator,c
  1903  001546  0E45               	movlw	low _margin6
  1904  001548  6E07               	movwf	movement@margin,c
  1905  00154A  0E00               	movlw	high _margin6
  1906  00154C  6E08               	movwf	movement@margin+1,c
  1907  00154E  ECEF  F00B         	call	_movement	;wreg free
  1908                           
  1909                           ;main.c: 420: movement(actuator7, extendPos, 7, &margin7);
  1910  001552  C02B  F001         	movff	main@actuator7,movement@current_pos
  1911  001556  C02C  F002         	movff	main@actuator7+1,movement@current_pos+1
  1912  00155A  C032  F003         	movff	main@extendPos,movement@set_point
  1913  00155E  C033  F004         	movff	main@extendPos+1,movement@set_point+1
  1914  001562  0E00               	movlw	0
  1915  001564  6E06               	movwf	movement@actuator+1,c
  1916  001566  0E07               	movlw	7
  1917  001568  6E05               	movwf	movement@actuator,c
  1918  00156A  0E47               	movlw	low _margin7
  1919  00156C  6E07               	movwf	movement@margin,c
  1920  00156E  0E00               	movlw	high _margin7
  1921  001570  6E08               	movwf	movement@margin+1,c
  1922  001572  ECEF  F00B         	call	_movement	;wreg free
  1923                           
  1924                           ;main.c: 422: } else if (FORW == 0 && BACK == 0 && EXTEND == 0 && RETRACT == 0 && CUSTOM
      +                           == 1){
  1925  001576  D453               	goto	l67
  1926  001578                     l1877:
  1927  001578  5037               	movf	_FORW,w,c
  1928  00157A  A4D8               	btfss	status,2,c
  1929  00157C  D09E               	goto	l1889
  1930  00157E  5034               	movf	_BACK,w,c
  1931  001580  A4D8               	btfss	status,2,c
  1932  001582  D09B               	goto	l1889
  1933  001584  5036               	movf	_EXTEND,w,c
  1934  001586  A4D8               	btfss	status,2,c
  1935  001588  D098               	goto	l1889
  1936  00158A  5038               	movf	_RETRACT,w,c
  1937  00158C  A4D8               	btfss	status,2,c
  1938  00158E  D095               	goto	l1889
  1939  001590  0435               	decf	_CUSTOM,w,c
  1940  001592  A4D8               	btfss	status,2,c
  1941  001594  D092               	goto	l1889
  1942                           
  1943                           ;main.c: 427: movement(actuator0, newPos, 0, &margin0);
  1944  001596  C01D  F001         	movff	main@actuator0,movement@current_pos
  1945  00159A  C01E  F002         	movff	main@actuator0+1,movement@current_pos+1
  1946  00159E  C02D  F003         	movff	main@newPos,movement@set_point
  1947  0015A2  C02E  F004         	movff	main@newPos+1,movement@set_point+1
  1948  0015A6  0E00               	movlw	0
  1949  0015A8  6E06               	movwf	movement@actuator+1,c
  1950  0015AA  0E00               	movlw	0
  1951  0015AC  6E05               	movwf	movement@actuator,c
  1952  0015AE  0E39               	movlw	low _margin0
  1953  0015B0  6E07               	movwf	movement@margin,c
  1954  0015B2  0E00               	movlw	high _margin0
  1955  0015B4  6E08               	movwf	movement@margin+1,c
  1956  0015B6  ECEF  F00B         	call	_movement	;wreg free
  1957                           
  1958                           ;main.c: 428: movement(actuator1, newPos, 1, &margin1);
  1959  0015BA  C01F  F001         	movff	main@actuator1,movement@current_pos
  1960  0015BE  C020  F002         	movff	main@actuator1+1,movement@current_pos+1
  1961  0015C2  C02D  F003         	movff	main@newPos,movement@set_point
  1962  0015C6  C02E  F004         	movff	main@newPos+1,movement@set_point+1
  1963  0015CA  0E00               	movlw	0
  1964  0015CC  6E06               	movwf	movement@actuator+1,c
  1965  0015CE  0E01               	movlw	1
  1966  0015D0  6E05               	movwf	movement@actuator,c
  1967  0015D2  0E3B               	movlw	low _margin1
  1968  0015D4  6E07               	movwf	movement@margin,c
  1969  0015D6  0E00               	movlw	high _margin1
  1970  0015D8  6E08               	movwf	movement@margin+1,c
  1971  0015DA  ECEF  F00B         	call	_movement	;wreg free
  1972                           
  1973                           ;main.c: 429: movement(actuator2, newPos, 2, &margin2);
  1974  0015DE  C021  F001         	movff	main@actuator2,movement@current_pos
  1975  0015E2  C022  F002         	movff	main@actuator2+1,movement@current_pos+1
  1976  0015E6  C02D  F003         	movff	main@newPos,movement@set_point
  1977  0015EA  C02E  F004         	movff	main@newPos+1,movement@set_point+1
  1978  0015EE  0E00               	movlw	0
  1979  0015F0  6E06               	movwf	movement@actuator+1,c
  1980  0015F2  0E02               	movlw	2
  1981  0015F4  6E05               	movwf	movement@actuator,c
  1982  0015F6  0E3D               	movlw	low _margin2
  1983  0015F8  6E07               	movwf	movement@margin,c
  1984  0015FA  0E00               	movlw	high _margin2
  1985  0015FC  6E08               	movwf	movement@margin+1,c
  1986  0015FE  ECEF  F00B         	call	_movement	;wreg free
  1987                           
  1988                           ;main.c: 430: movement(actuator3, newPos, 3, &margin3);
  1989  001602  C023  F001         	movff	main@actuator3,movement@current_pos
  1990  001606  C024  F002         	movff	main@actuator3+1,movement@current_pos+1
  1991  00160A  C02D  F003         	movff	main@newPos,movement@set_point
  1992  00160E  C02E  F004         	movff	main@newPos+1,movement@set_point+1
  1993  001612  0E00               	movlw	0
  1994  001614  6E06               	movwf	movement@actuator+1,c
  1995  001616  0E03               	movlw	3
  1996  001618  6E05               	movwf	movement@actuator,c
  1997  00161A  0E3F               	movlw	low _margin3
  1998  00161C  6E07               	movwf	movement@margin,c
  1999  00161E  0E00               	movlw	high _margin3
  2000  001620  6E08               	movwf	movement@margin+1,c
  2001  001622  ECEF  F00B         	call	_movement	;wreg free
  2002                           
  2003                           ;main.c: 431: movement(actuator4, newPos, 4, &margin4);
  2004  001626  C025  F001         	movff	main@actuator4,movement@current_pos
  2005  00162A  C026  F002         	movff	main@actuator4+1,movement@current_pos+1
  2006  00162E  C02D  F003         	movff	main@newPos,movement@set_point
  2007  001632  C02E  F004         	movff	main@newPos+1,movement@set_point+1
  2008  001636  0E00               	movlw	0
  2009  001638  6E06               	movwf	movement@actuator+1,c
  2010  00163A  0E04               	movlw	4
  2011  00163C  6E05               	movwf	movement@actuator,c
  2012  00163E  0E41               	movlw	low _margin4
  2013  001640  6E07               	movwf	movement@margin,c
  2014  001642  0E00               	movlw	high _margin4
  2015  001644  6E08               	movwf	movement@margin+1,c
  2016  001646  ECEF  F00B         	call	_movement	;wreg free
  2017                           
  2018                           ;main.c: 432: movement(actuator5, newPos, 5, &margin5);
  2019  00164A  C027  F001         	movff	main@actuator5,movement@current_pos
  2020  00164E  C028  F002         	movff	main@actuator5+1,movement@current_pos+1
  2021  001652  C02D  F003         	movff	main@newPos,movement@set_point
  2022  001656  C02E  F004         	movff	main@newPos+1,movement@set_point+1
  2023  00165A  0E00               	movlw	0
  2024  00165C  6E06               	movwf	movement@actuator+1,c
  2025  00165E  0E05               	movlw	5
  2026  001660  6E05               	movwf	movement@actuator,c
  2027  001662  0E43               	movlw	low _margin5
  2028  001664  6E07               	movwf	movement@margin,c
  2029  001666  0E00               	movlw	high _margin5
  2030  001668  6E08               	movwf	movement@margin+1,c
  2031  00166A  ECEF  F00B         	call	_movement	;wreg free
  2032                           
  2033                           ;main.c: 433: movement(actuator6, newPos, 6, &margin6);
  2034  00166E  C029  F001         	movff	main@actuator6,movement@current_pos
  2035  001672  C02A  F002         	movff	main@actuator6+1,movement@current_pos+1
  2036  001676  C02D  F003         	movff	main@newPos,movement@set_point
  2037  00167A  C02E  F004         	movff	main@newPos+1,movement@set_point+1
  2038  00167E  0E00               	movlw	0
  2039  001680  6E06               	movwf	movement@actuator+1,c
  2040  001682  0E06               	movlw	6
  2041  001684  6E05               	movwf	movement@actuator,c
  2042  001686  0E45               	movlw	low _margin6
  2043  001688  6E07               	movwf	movement@margin,c
  2044  00168A  0E00               	movlw	high _margin6
  2045  00168C  6E08               	movwf	movement@margin+1,c
  2046  00168E  ECEF  F00B         	call	_movement	;wreg free
  2047                           
  2048                           ;main.c: 434: movement(actuator7, newPos, 7, &margin7);
  2049  001692  C02B  F001         	movff	main@actuator7,movement@current_pos
  2050  001696  C02C  F002         	movff	main@actuator7+1,movement@current_pos+1
  2051  00169A  C02D  F003         	movff	main@newPos,movement@set_point
  2052  00169E  C02E  F004         	movff	main@newPos+1,movement@set_point+1
  2053  0016A2  0E00               	movlw	0
  2054  0016A4  6E06               	movwf	movement@actuator+1,c
  2055  0016A6  0E07               	movlw	7
  2056  0016A8  6E05               	movwf	movement@actuator,c
  2057  0016AA  0E47               	movlw	low _margin7
  2058  0016AC  6E07               	movwf	movement@margin,c
  2059  0016AE  0E00               	movlw	high _margin7
  2060  0016B0  6E08               	movwf	movement@margin+1,c
  2061  0016B2  ECEF  F00B         	call	_movement	;wreg free
  2062                           
  2063                           ;main.c: 437: } else {
  2064  0016B6  EF0F  F007         	goto	l67
  2065  0016BA                     l1889:
  2066                           
  2067                           ;main.c: 440: movement(actuator0, retractPos, 0, &margin0);
  2068  0016BA  C01D  F001         	movff	main@actuator0,movement@current_pos
  2069  0016BE  C01E  F002         	movff	main@actuator0+1,movement@current_pos+1
  2070  0016C2  C030  F003         	movff	main@retractPos,movement@set_point
  2071  0016C6  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  2072  0016CA  0E00               	movlw	0
  2073  0016CC  6E06               	movwf	movement@actuator+1,c
  2074  0016CE  0E00               	movlw	0
  2075  0016D0  6E05               	movwf	movement@actuator,c
  2076  0016D2  0E39               	movlw	low _margin0
  2077  0016D4  6E07               	movwf	movement@margin,c
  2078  0016D6  0E00               	movlw	high _margin0
  2079  0016D8  6E08               	movwf	movement@margin+1,c
  2080  0016DA  ECEF  F00B         	call	_movement	;wreg free
  2081                           
  2082                           ;main.c: 441: movement(actuator1, retractPos, 1, &margin1);
  2083  0016DE  C01F  F001         	movff	main@actuator1,movement@current_pos
  2084  0016E2  C020  F002         	movff	main@actuator1+1,movement@current_pos+1
  2085  0016E6  C030  F003         	movff	main@retractPos,movement@set_point
  2086  0016EA  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  2087  0016EE  0E00               	movlw	0
  2088  0016F0  6E06               	movwf	movement@actuator+1,c
  2089  0016F2  0E01               	movlw	1
  2090  0016F4  6E05               	movwf	movement@actuator,c
  2091  0016F6  0E3B               	movlw	low _margin1
  2092  0016F8  6E07               	movwf	movement@margin,c
  2093  0016FA  0E00               	movlw	high _margin1
  2094  0016FC  6E08               	movwf	movement@margin+1,c
  2095  0016FE  ECEF  F00B         	call	_movement	;wreg free
  2096                           
  2097                           ;main.c: 442: movement(actuator2, retractPos, 2, &margin2);
  2098  001702  C021  F001         	movff	main@actuator2,movement@current_pos
  2099  001706  C022  F002         	movff	main@actuator2+1,movement@current_pos+1
  2100  00170A  C030  F003         	movff	main@retractPos,movement@set_point
  2101  00170E  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  2102  001712  0E00               	movlw	0
  2103  001714  6E06               	movwf	movement@actuator+1,c
  2104  001716  0E02               	movlw	2
  2105  001718  6E05               	movwf	movement@actuator,c
  2106  00171A  0E3D               	movlw	low _margin2
  2107  00171C  6E07               	movwf	movement@margin,c
  2108  00171E  0E00               	movlw	high _margin2
  2109  001720  6E08               	movwf	movement@margin+1,c
  2110  001722  ECEF  F00B         	call	_movement	;wreg free
  2111                           
  2112                           ;main.c: 443: movement(actuator3, retractPos, 3, &margin3);
  2113  001726  C023  F001         	movff	main@actuator3,movement@current_pos
  2114  00172A  C024  F002         	movff	main@actuator3+1,movement@current_pos+1
  2115  00172E  C030  F003         	movff	main@retractPos,movement@set_point
  2116  001732  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  2117  001736  0E00               	movlw	0
  2118  001738  6E06               	movwf	movement@actuator+1,c
  2119  00173A  0E03               	movlw	3
  2120  00173C  6E05               	movwf	movement@actuator,c
  2121  00173E  0E3F               	movlw	low _margin3
  2122  001740  6E07               	movwf	movement@margin,c
  2123  001742  0E00               	movlw	high _margin3
  2124  001744  6E08               	movwf	movement@margin+1,c
  2125  001746  ECEF  F00B         	call	_movement	;wreg free
  2126                           
  2127                           ;main.c: 444: movement(actuator4, retractPos, 4, &margin4);
  2128  00174A  C025  F001         	movff	main@actuator4,movement@current_pos
  2129  00174E  C026  F002         	movff	main@actuator4+1,movement@current_pos+1
  2130  001752  C030  F003         	movff	main@retractPos,movement@set_point
  2131  001756  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  2132  00175A  0E00               	movlw	0
  2133  00175C  6E06               	movwf	movement@actuator+1,c
  2134  00175E  0E04               	movlw	4
  2135  001760  6E05               	movwf	movement@actuator,c
  2136  001762  0E41               	movlw	low _margin4
  2137  001764  6E07               	movwf	movement@margin,c
  2138  001766  0E00               	movlw	high _margin4
  2139  001768  6E08               	movwf	movement@margin+1,c
  2140  00176A  ECEF  F00B         	call	_movement	;wreg free
  2141                           
  2142                           ;main.c: 445: movement(actuator5, retractPos, 5, &margin5);
  2143  00176E  C027  F001         	movff	main@actuator5,movement@current_pos
  2144  001772  C028  F002         	movff	main@actuator5+1,movement@current_pos+1
  2145  001776  C030  F003         	movff	main@retractPos,movement@set_point
  2146  00177A  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  2147  00177E  0E00               	movlw	0
  2148  001780  6E06               	movwf	movement@actuator+1,c
  2149  001782  0E05               	movlw	5
  2150  001784  6E05               	movwf	movement@actuator,c
  2151  001786  0E43               	movlw	low _margin5
  2152  001788  6E07               	movwf	movement@margin,c
  2153  00178A  0E00               	movlw	high _margin5
  2154  00178C  6E08               	movwf	movement@margin+1,c
  2155  00178E  ECEF  F00B         	call	_movement	;wreg free
  2156                           
  2157                           ;main.c: 446: movement(actuator6, retractPos, 6, &margin6);
  2158  001792  C029  F001         	movff	main@actuator6,movement@current_pos
  2159  001796  C02A  F002         	movff	main@actuator6+1,movement@current_pos+1
  2160  00179A  C030  F003         	movff	main@retractPos,movement@set_point
  2161  00179E  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  2162  0017A2  0E00               	movlw	0
  2163  0017A4  6E06               	movwf	movement@actuator+1,c
  2164  0017A6  0E06               	movlw	6
  2165  0017A8  6E05               	movwf	movement@actuator,c
  2166  0017AA  0E45               	movlw	low _margin6
  2167  0017AC  6E07               	movwf	movement@margin,c
  2168  0017AE  0E00               	movlw	high _margin6
  2169  0017B0  6E08               	movwf	movement@margin+1,c
  2170  0017B2  ECEF  F00B         	call	_movement	;wreg free
  2171                           
  2172                           ;main.c: 447: movement(actuator7, retractPos, 7, &margin7);
  2173  0017B6  C02B  F001         	movff	main@actuator7,movement@current_pos
  2174  0017BA  C02C  F002         	movff	main@actuator7+1,movement@current_pos+1
  2175  0017BE  C030  F003         	movff	main@retractPos,movement@set_point
  2176  0017C2  C031  F004         	movff	main@retractPos+1,movement@set_point+1
  2177  0017C6  0E00               	movlw	0
  2178  0017C8  6E06               	movwf	movement@actuator+1,c
  2179  0017CA  0E07               	movlw	7
  2180  0017CC  6E05               	movwf	movement@actuator,c
  2181  0017CE  0E47               	movlw	low _margin7
  2182  0017D0  6E07               	movwf	movement@margin,c
  2183  0017D2  0E00               	movlw	high _margin7
  2184  0017D4  6E08               	movwf	movement@margin+1,c
  2185  0017D6  ECEF  F00B         	call	_movement	;wreg free
  2186  0017DA  EF0F  F007         	goto	l67
  2187  0017DE                     __end_of_main:
  2188                           	opt stack 0
  2189                           tblptru	equ	0xFF8
  2190                           tblptrh	equ	0xFF7
  2191                           tblptrl	equ	0xFF6
  2192                           tablat	equ	0xFF5
  2193                           postinc0	equ	0xFEE
  2194                           wreg	equ	0xFE8
  2195                           postdec1	equ	0xFE5
  2196                           fsr1l	equ	0xFE1
  2197                           status	equ	0xFD8
  2198                           
  2199 ;; *************** function _uart_write_text *****************
  2200 ;; Defined at:
  2201 ;;		line 49 in file "uart.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;  text            2    1[COMRAM] PTR unsigned char 
  2204 ;;		 -> STR_14(30), STR_13(30), STR_12(30), STR_11(30), 
  2205 ;;		 -> STR_10(30), STR_9(30), STR_8(30), STR_7(30), 
  2206 ;;		 -> STR_6(30), STR_5(30), STR_4(32), STR_3(31), 
  2207 ;;		 -> STR_2(33), STR_1(32), 
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;  i               2    5[COMRAM] int 
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  1    wreg      void 
  2212 ;; Registers used:
  2213 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2219 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2221 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2222 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2223 ;;Total ram usage:        6 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    1
  2226 ;; This function calls:
  2227 ;;		_uart_write
  2228 ;; This function is called by:
  2229 ;;		_main
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text1
  2234  001B72                     __ptext1:
  2235                           	opt stack 0
  2236  001B72                     _uart_write_text:
  2237                           	opt stack 29
  2238                           
  2239                           ;uart.c: 51: int i;
  2240                           ;uart.c: 52: for(i = 0; text[i] != '\0'; i++)
  2241                           
  2242                           ;incstack = 0
  2243  001B72  0E00               	movlw	0
  2244  001B74  6E07               	movwf	uart_write_text@i+1,c
  2245  001B76  0E00               	movlw	0
  2246  001B78  6E06               	movwf	uart_write_text@i,c
  2247  001B7A  D010               	goto	l1621
  2248  001B7C                     l1617:
  2249                           
  2250                           ;uart.c: 53: uart_write(text[i]);
  2251  001B7C  5006               	movf	uart_write_text@i,w,c
  2252  001B7E  2402               	addwf	uart_write_text@text,w,c
  2253  001B80  6E04               	movwf	??_uart_write_text& (0+255),c
  2254  001B82  5007               	movf	uart_write_text@i+1,w,c
  2255  001B84  2003               	addwfc	uart_write_text@text+1,w,c
  2256  001B86  6E05               	movwf	(??_uart_write_text+1)& (0+255),c
  2257  001B88  C004  FFF6         	movff	??_uart_write_text,tblptrl
  2258  001B8C  C005  FFF7         	movff	??_uart_write_text+1,tblptrh
  2259  001B90                     	if	0	;tblptru may be non-zero
  2260  001B90                     	endif
  2261  001B90                     	if	0	;tblptru may be non-zero
  2262  001B90                     	endif
  2263  001B90  0008               	tblrd		*
  2264  001B92  50F5               	movf	tablat,w,c
  2265  001B94  EC41  F00E         	call	_uart_write
  2266  001B98  4A06               	infsnz	uart_write_text@i,f,c
  2267  001B9A  2A07               	incf	uart_write_text@i+1,f,c
  2268  001B9C                     l1621:
  2269  001B9C  5006               	movf	uart_write_text@i,w,c
  2270  001B9E  2402               	addwf	uart_write_text@text,w,c
  2271  001BA0  6E04               	movwf	??_uart_write_text& (0+255),c
  2272  001BA2  5007               	movf	uart_write_text@i+1,w,c
  2273  001BA4  2003               	addwfc	uart_write_text@text+1,w,c
  2274  001BA6  6E05               	movwf	(??_uart_write_text+1)& (0+255),c
  2275  001BA8  C004  FFF6         	movff	??_uart_write_text,tblptrl
  2276  001BAC  C005  FFF7         	movff	??_uart_write_text+1,tblptrh
  2277  001BB0                     	if	0	;tblptru may be non-zero
  2278  001BB0                     	endif
  2279  001BB0                     	if	0	;tblptru may be non-zero
  2280  001BB0                     	endif
  2281  001BB0  0008               	tblrd		*
  2282  001BB2  50F5               	movf	tablat,w,c
  2283  001BB4  0900               	iorlw	0
  2284  001BB6  B4D8               	btfsc	status,2,c
  2285  001BB8  0012               	return	
  2286  001BBA  D7E0               	goto	l1617
  2287  001BBC                     __end_of_uart_write_text:
  2288                           	opt stack 0
  2289                           tblptru	equ	0xFF8
  2290                           tblptrh	equ	0xFF7
  2291                           tblptrl	equ	0xFF6
  2292                           tablat	equ	0xFF5
  2293                           postinc0	equ	0xFEE
  2294                           wreg	equ	0xFE8
  2295                           postdec1	equ	0xFE5
  2296                           fsr1l	equ	0xFE1
  2297                           status	equ	0xFD8
  2298                           
  2299 ;; *************** function _uart_write *****************
  2300 ;; Defined at:
  2301 ;;		line 42 in file "uart.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;  data            1    wreg     unsigned char 
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;  data            1    0[COMRAM] unsigned char 
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2318 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2319 ;;Total ram usage:        1 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; This function calls:
  2322 ;;		Nothing
  2323 ;; This function is called by:
  2324 ;;		_uart_write_text
  2325 ;;		_uart_write_array
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text2
  2330  001C82                     __ptext2:
  2331                           	opt stack 0
  2332  001C82                     _uart_write:
  2333                           	opt stack 29
  2334                           
  2335                           ;incstack = 0
  2336                           ;uart_write@data stored from wreg
  2337  001C82  6E01               	movwf	uart_write@data,c
  2338  001C84                     l414:
  2339  001C84  A2AC               	btfss	4012,1,c	;volatile
  2340  001C86  D7FE               	goto	l414
  2341                           
  2342                           ;uart.c: 45: TXREG = data;
  2343  001C88  C001  FFAD         	movff	uart_write@data,4013	;volatile
  2344  001C8C  0012               	return		;funcret
  2345  001C8E                     __end_of_uart_write:
  2346                           	opt stack 0
  2347                           tblptru	equ	0xFF8
  2348                           tblptrh	equ	0xFF7
  2349                           tblptrl	equ	0xFF6
  2350                           tablat	equ	0xFF5
  2351                           postinc0	equ	0xFEE
  2352                           wreg	equ	0xFE8
  2353                           postdec1	equ	0xFE5
  2354                           fsr1l	equ	0xFE1
  2355                           status	equ	0xFD8
  2356                           
  2357 ;; *************** function _uart_read *****************
  2358 ;; Defined at:
  2359 ;;		line 35 in file "uart.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;		None
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;		None
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      unsigned char 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2377 ;;Total ram usage:        0 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; This function calls:
  2380 ;;		Nothing
  2381 ;; This function is called by:
  2382 ;;		_main
  2383 ;;		_uart_read_text
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           	psect	text3
  2388  001C8E                     __ptext3:
  2389                           	opt stack 0
  2390  001C8E                     _uart_read:
  2391                           	opt stack 30
  2392  001C8E                     l406:
  2393  001C8E  AA9E               	btfss	3998,5,c	;volatile
  2394  001C90  BA9E               	btfsc	3998,5,c	;volatile
  2395  001C92  D001               	goto	l1163
  2396  001C94  D7FC               	goto	l406
  2397  001C96                     l1163:
  2398                           
  2399                           ;uart.c: 38: return RCREG;
  2400  001C96  50AE               	movf	4014,w,c	;volatile
  2401  001C98  0012               	return	
  2402  001C9A                     __end_of_uart_read:
  2403                           	opt stack 0
  2404                           tblptru	equ	0xFF8
  2405                           tblptrh	equ	0xFF7
  2406                           tblptrl	equ	0xFF6
  2407                           tablat	equ	0xFF5
  2408                           postinc0	equ	0xFEE
  2409                           wreg	equ	0xFE8
  2410                           postdec1	equ	0xFE5
  2411                           fsr1l	equ	0xFE1
  2412                           status	equ	0xFD8
  2413                           
  2414 ;; *************** function _uart_init *****************
  2415 ;; Defined at:
  2416 ;;		line 14 in file "uart.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;  baudrate        4   14[COMRAM] const long 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;  x               2   26[COMRAM] unsigned int 
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  1    wreg      void 
  2423 ;; Registers used:
  2424 ;;		wreg, status,2, status,0, cstack
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2430 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2431 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2432 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2433 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2434 ;;Total ram usage:       14 bytes
  2435 ;; Hardware stack levels used:    1
  2436 ;; Hardware stack levels required when called:    1
  2437 ;; This function calls:
  2438 ;;		___aldiv
  2439 ;; This function is called by:
  2440 ;;		_main
  2441 ;; This function uses a non-reentrant model
  2442 ;;
  2443                           
  2444                           	psect	text4
  2445  001ADA                     __ptext4:
  2446                           	opt stack 0
  2447  001ADA                     _uart_init:
  2448                           	opt stack 29
  2449                           
  2450                           ;uart.c: 16: unsigned int x;
  2451                           ;uart.c: 17: x = (32000000 - baudrate * 64)/(baudrate * 64);
  2452                           
  2453                           ;incstack = 0
  2454  001ADA  C00F  F013         	movff	uart_init@baudrate,??_uart_init
  2455  001ADE  C010  F014         	movff	uart_init@baudrate+1,??_uart_init+1
  2456  001AE2  C011  F015         	movff	uart_init@baudrate+2,??_uart_init+2
  2457  001AE6  C012  F016         	movff	uart_init@baudrate+3,??_uart_init+3
  2458  001AEA  0E06               	movlw	6
  2459  001AEC                     u1005:
  2460  001AEC  90D8               	bcf	status,0,c
  2461  001AEE  3613               	rlcf	??_uart_init,f,c
  2462  001AF0  3614               	rlcf	??_uart_init+1,f,c
  2463  001AF2  3615               	rlcf	??_uart_init+2,f,c
  2464  001AF4  3616               	rlcf	??_uart_init+3,f,c
  2465  001AF6  2EE8               	decfsz	wreg,f,c
  2466  001AF8  D7F9               	goto	u1005
  2467  001AFA  1E13               	comf	??_uart_init,f,c
  2468  001AFC  1E14               	comf	??_uart_init+1,f,c
  2469  001AFE  1E15               	comf	??_uart_init+2,f,c
  2470  001B00  1E16               	comf	??_uart_init+3,f,c
  2471  001B02  2A13               	incf	??_uart_init,f,c
  2472  001B04  0E00               	movlw	0
  2473  001B06  2214               	addwfc	??_uart_init+1,f,c
  2474  001B08  2215               	addwfc	??_uart_init+2,f,c
  2475  001B0A  2216               	addwfc	??_uart_init+3,f,c
  2476  001B0C  0E00               	movlw	0
  2477  001B0E  2413               	addwf	??_uart_init,w,c
  2478  001B10  6E01               	movwf	___aldiv@dividend,c
  2479  001B12  0E48               	movlw	72
  2480  001B14  2014               	addwfc	??_uart_init+1,w,c
  2481  001B16  6E02               	movwf	___aldiv@dividend+1,c
  2482  001B18  0EE8               	movlw	232
  2483  001B1A  2015               	addwfc	??_uart_init+2,w,c
  2484  001B1C  6E03               	movwf	___aldiv@dividend+2,c
  2485  001B1E  0E01               	movlw	1
  2486  001B20  2016               	addwfc	??_uart_init+3,w,c
  2487  001B22  6E04               	movwf	___aldiv@dividend+3,c
  2488  001B24  C00F  F017         	movff	uart_init@baudrate,??_uart_init+4
  2489  001B28  C010  F018         	movff	uart_init@baudrate+1,??_uart_init+5
  2490  001B2C  C011  F019         	movff	uart_init@baudrate+2,??_uart_init+6
  2491  001B30  C012  F01A         	movff	uart_init@baudrate+3,??_uart_init+7
  2492  001B34  0E06               	movlw	6
  2493  001B36                     u1015:
  2494  001B36  90D8               	bcf	status,0,c
  2495  001B38  3617               	rlcf	??_uart_init+4,f,c
  2496  001B3A  3618               	rlcf	??_uart_init+5,f,c
  2497  001B3C  3619               	rlcf	??_uart_init+6,f,c
  2498  001B3E  361A               	rlcf	??_uart_init+7,f,c
  2499  001B40  2EE8               	decfsz	wreg,f,c
  2500  001B42  D7F9               	goto	u1015
  2501  001B44  C017  F005         	movff	??_uart_init+4,___aldiv@divisor
  2502  001B48  C018  F006         	movff	??_uart_init+5,___aldiv@divisor+1
  2503  001B4C  C019  F007         	movff	??_uart_init+6,___aldiv@divisor+2
  2504  001B50  C01A  F008         	movff	??_uart_init+7,___aldiv@divisor+3
  2505  001B54  ECA8  F00C         	call	___aldiv	;wreg free
  2506  001B58  C001  F01B         	movff	?___aldiv,uart_init@x
  2507  001B5C  C002  F01C         	movff	?___aldiv+1,uart_init@x+1
  2508                           
  2509                           ;uart.c: 19: SPBRG = x;
  2510  001B60  C01B  FFAF         	movff	uart_init@x,4015	;volatile
  2511                           
  2512                           ;uart.c: 20: TXSTAbits.SYNC = 0;
  2513  001B64  98AC               	bcf	4012,4,c	;volatile
  2514                           
  2515                           ;uart.c: 21: RCSTAbits.SPEN = 1;
  2516  001B66  8EAB               	bsf	4011,7,c	;volatile
  2517                           
  2518                           ;uart.c: 22: TRISCbits.RC7 = 1;
  2519  001B68  8E94               	bsf	3988,7,c	;volatile
  2520                           
  2521                           ;uart.c: 23: TRISCbits.RC6 = 0;
  2522  001B6A  9C94               	bcf	3988,6,c	;volatile
  2523                           
  2524                           ;uart.c: 24: RCSTAbits.CREN = 1;
  2525  001B6C  88AB               	bsf	4011,4,c	;volatile
  2526                           
  2527                           ;uart.c: 25: TXSTAbits.TXEN = 1;
  2528  001B6E  8AAC               	bsf	4012,5,c	;volatile
  2529  001B70  0012               	return		;funcret
  2530  001B72                     __end_of_uart_init:
  2531                           	opt stack 0
  2532                           tblptru	equ	0xFF8
  2533                           tblptrh	equ	0xFF7
  2534                           tblptrl	equ	0xFF6
  2535                           tablat	equ	0xFF5
  2536                           postinc0	equ	0xFEE
  2537                           wreg	equ	0xFE8
  2538                           postdec1	equ	0xFE5
  2539                           fsr1l	equ	0xFE1
  2540                           status	equ	0xFD8
  2541                           
  2542 ;; *************** function ___aldiv *****************
  2543 ;; Defined at:
  2544 ;;		line 8 in file "/opt/microchip/xc8/v1.36/sources/common/aldiv.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;  dividend        4    0[COMRAM] long 
  2547 ;;  divisor         4    4[COMRAM] long 
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;  quotient        4   10[COMRAM] long 
  2550 ;;  sign            1    9[COMRAM] unsigned char 
  2551 ;;  counter         1    8[COMRAM] unsigned char 
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  4    0[COMRAM] long 
  2554 ;; Registers used:
  2555 ;;		wreg, status,2, status,0
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2561 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2562 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2564 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2565 ;;Total ram usage:       14 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_uart_init
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text5
  2575  001950                     __ptext5:
  2576                           	opt stack 0
  2577  001950                     ___aldiv:
  2578                           	opt stack 29
  2579                           
  2580                           ;incstack = 0
  2581  001950  0E00               	movlw	0
  2582  001952  6E0A               	movwf	___aldiv@sign,c
  2583  001954  AE08               	btfss	___aldiv@divisor+3,7,c
  2584  001956  D00A               	goto	l1553
  2585  001958  1E08               	comf	___aldiv@divisor+3,f,c
  2586  00195A  1E07               	comf	___aldiv@divisor+2,f,c
  2587  00195C  1E06               	comf	___aldiv@divisor+1,f,c
  2588  00195E  6C05               	negf	___aldiv@divisor,c
  2589  001960  0E00               	movlw	0
  2590  001962  2206               	addwfc	___aldiv@divisor+1,f,c
  2591  001964  2207               	addwfc	___aldiv@divisor+2,f,c
  2592  001966  2208               	addwfc	___aldiv@divisor+3,f,c
  2593  001968  0E01               	movlw	1
  2594  00196A  6E0A               	movwf	___aldiv@sign,c
  2595  00196C                     l1553:
  2596  00196C  AE04               	btfss	___aldiv@dividend+3,7,c
  2597  00196E  D00A               	goto	l1559
  2598  001970  1E04               	comf	___aldiv@dividend+3,f,c
  2599  001972  1E03               	comf	___aldiv@dividend+2,f,c
  2600  001974  1E02               	comf	___aldiv@dividend+1,f,c
  2601  001976  6C01               	negf	___aldiv@dividend,c
  2602  001978  0E00               	movlw	0
  2603  00197A  2202               	addwfc	___aldiv@dividend+1,f,c
  2604  00197C  2203               	addwfc	___aldiv@dividend+2,f,c
  2605  00197E  2204               	addwfc	___aldiv@dividend+3,f,c
  2606  001980  0E01               	movlw	1
  2607  001982  1A0A               	xorwf	___aldiv@sign,f,c
  2608  001984                     l1559:
  2609  001984  0E00               	movlw	0
  2610  001986  6E0B               	movwf	___aldiv@quotient,c
  2611  001988  0E00               	movlw	0
  2612  00198A  6E0C               	movwf	___aldiv@quotient+1,c
  2613  00198C  0E00               	movlw	0
  2614  00198E  6E0D               	movwf	___aldiv@quotient+2,c
  2615  001990  0E00               	movlw	0
  2616  001992  6E0E               	movwf	___aldiv@quotient+3,c
  2617  001994  5005               	movf	___aldiv@divisor,w,c
  2618  001996  1006               	iorwf	___aldiv@divisor+1,w,c
  2619  001998  1007               	iorwf	___aldiv@divisor+2,w,c
  2620  00199A  1008               	iorwf	___aldiv@divisor+3,w,c
  2621  00199C  B4D8               	btfsc	status,2,c
  2622  00199E  D02A               	goto	l1581
  2623  0019A0  0E01               	movlw	1
  2624  0019A2  6E09               	movwf	___aldiv@counter,c
  2625  0019A4  D006               	goto	l1567
  2626  0019A6                     l1565:
  2627  0019A6  90D8               	bcf	status,0,c
  2628  0019A8  3605               	rlcf	___aldiv@divisor,f,c
  2629  0019AA  3606               	rlcf	___aldiv@divisor+1,f,c
  2630  0019AC  3607               	rlcf	___aldiv@divisor+2,f,c
  2631  0019AE  3608               	rlcf	___aldiv@divisor+3,f,c
  2632  0019B0  2A09               	incf	___aldiv@counter,f,c
  2633  0019B2                     l1567:
  2634  0019B2  AE08               	btfss	___aldiv@divisor+3,7,c
  2635  0019B4  D7F8               	goto	l1565
  2636  0019B6                     l1569:
  2637  0019B6  90D8               	bcf	status,0,c
  2638  0019B8  360B               	rlcf	___aldiv@quotient,f,c
  2639  0019BA  360C               	rlcf	___aldiv@quotient+1,f,c
  2640  0019BC  360D               	rlcf	___aldiv@quotient+2,f,c
  2641  0019BE  360E               	rlcf	___aldiv@quotient+3,f,c
  2642  0019C0  5005               	movf	___aldiv@divisor,w,c
  2643  0019C2  5C01               	subwf	___aldiv@dividend,w,c
  2644  0019C4  5006               	movf	___aldiv@divisor+1,w,c
  2645  0019C6  5802               	subwfb	___aldiv@dividend+1,w,c
  2646  0019C8  5007               	movf	___aldiv@divisor+2,w,c
  2647  0019CA  5803               	subwfb	___aldiv@dividend+2,w,c
  2648  0019CC  5008               	movf	___aldiv@divisor+3,w,c
  2649  0019CE  5804               	subwfb	___aldiv@dividend+3,w,c
  2650  0019D0  A0D8               	btfss	status,0,c
  2651  0019D2  D009               	goto	l1577
  2652  0019D4  5005               	movf	___aldiv@divisor,w,c
  2653  0019D6  5E01               	subwf	___aldiv@dividend,f,c
  2654  0019D8  5006               	movf	___aldiv@divisor+1,w,c
  2655  0019DA  5A02               	subwfb	___aldiv@dividend+1,f,c
  2656  0019DC  5007               	movf	___aldiv@divisor+2,w,c
  2657  0019DE  5A03               	subwfb	___aldiv@dividend+2,f,c
  2658  0019E0  5008               	movf	___aldiv@divisor+3,w,c
  2659  0019E2  5A04               	subwfb	___aldiv@dividend+3,f,c
  2660  0019E4  800B               	bsf	___aldiv@quotient,0,c
  2661  0019E6                     l1577:
  2662  0019E6  90D8               	bcf	status,0,c
  2663  0019E8  3208               	rrcf	___aldiv@divisor+3,f,c
  2664  0019EA  3207               	rrcf	___aldiv@divisor+2,f,c
  2665  0019EC  3206               	rrcf	___aldiv@divisor+1,f,c
  2666  0019EE  3205               	rrcf	___aldiv@divisor,f,c
  2667  0019F0  2E09               	decfsz	___aldiv@counter,f,c
  2668  0019F2  D7E1               	goto	l1569
  2669  0019F4                     l1581:
  2670  0019F4  500A               	movf	___aldiv@sign,w,c
  2671  0019F6  B4D8               	btfsc	status,2,c
  2672  0019F8  D008               	goto	l1585
  2673  0019FA  1E0E               	comf	___aldiv@quotient+3,f,c
  2674  0019FC  1E0D               	comf	___aldiv@quotient+2,f,c
  2675  0019FE  1E0C               	comf	___aldiv@quotient+1,f,c
  2676  001A00  6C0B               	negf	___aldiv@quotient,c
  2677  001A02  0E00               	movlw	0
  2678  001A04  220C               	addwfc	___aldiv@quotient+1,f,c
  2679  001A06  220D               	addwfc	___aldiv@quotient+2,f,c
  2680  001A08  220E               	addwfc	___aldiv@quotient+3,f,c
  2681  001A0A                     l1585:
  2682  001A0A  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  2683  001A0E  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  2684  001A12  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  2685  001A16  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  2686  001A1A  0012               	return	
  2687  001A1C                     __end_of___aldiv:
  2688                           	opt stack 0
  2689                           tblptru	equ	0xFF8
  2690                           tblptrh	equ	0xFF7
  2691                           tblptrl	equ	0xFF6
  2692                           tablat	equ	0xFF5
  2693                           postinc0	equ	0xFEE
  2694                           wreg	equ	0xFE8
  2695                           postdec1	equ	0xFE5
  2696                           fsr1l	equ	0xFE1
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _uart_data_ready *****************
  2700 ;; Defined at:
  2701 ;;		line 29 in file "uart.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;		None
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;		None
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  1    wreg      unsigned char 
  2708 ;; Registers used:
  2709 ;;		wreg, status,2
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2718 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2719 ;;Total ram usage:        1 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_main
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text6
  2729  001C62                     __ptext6:
  2730                           	opt stack 0
  2731  001C62                     _uart_data_ready:
  2732                           	opt stack 30
  2733                           
  2734                           ;uart.c: 31: return (RCIF || PIR1bits.RCIF);
  2735                           
  2736                           ;incstack = 0
  2737  001C62  0E01               	movlw	1
  2738  001C64  6E01               	movwf	_uart_data_ready$2270,c
  2739  001C66  AA9E               	btfss	3998,5,c	;volatile
  2740  001C68  BA9E               	btfsc	3998,5,c	;volatile
  2741  001C6A  D002               	goto	l402
  2742  001C6C  0E00               	movlw	0
  2743  001C6E  6E01               	movwf	_uart_data_ready$2270,c
  2744  001C70                     l402:
  2745  001C70  5001               	movf	_uart_data_ready$2270,w,c
  2746  001C72  0012               	return	
  2747  001C74                     __end_of_uart_data_ready:
  2748                           	opt stack 0
  2749                           tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           postinc0	equ	0xFEE
  2754                           wreg	equ	0xFE8
  2755                           postdec1	equ	0xFE5
  2756                           fsr1l	equ	0xFE1
  2757                           status	equ	0xFD8
  2758                           
  2759 ;; *************** function _setAnalogIn *****************
  2760 ;; Defined at:
  2761 ;;		line 24 in file "system.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;		None
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;		None
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  1    wreg      void 
  2768 ;; Registers used:
  2769 ;;		None
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2779 ;;Total ram usage:        0 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; This function calls:
  2782 ;;		Nothing
  2783 ;; This function is called by:
  2784 ;;		_main
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text7
  2789  001BF6                     __ptext7:
  2790                           	opt stack 0
  2791  001BF6                     _setAnalogIn:
  2792                           	opt stack 30
  2793                           
  2794                           ;system.c: 27: ADCON1bits.PCFG = 0;
  2795                           
  2796                           ;incstack = 0
  2797  001BF6  90C1               	bcf	4033,0,c	;volatile
  2798  001BF8  92C1               	bcf	4033,1,c	;volatile
  2799  001BFA  94C1               	bcf	4033,2,c	;volatile
  2800  001BFC  96C1               	bcf	4033,3,c	;volatile
  2801                           
  2802                           ;system.c: 28: ADCON2bits.ADFM = 1;
  2803  001BFE  8EC0               	bsf	4032,7,c	;volatile
  2804                           
  2805                           ;system.c: 32: ADCON1bits.VCFG0 = 0;
  2806  001C00  98C1               	bcf	4033,4,c	;volatile
  2807                           
  2808                           ;system.c: 33: ADCON1bits.VCFG1 = 0;
  2809  001C02  9AC1               	bcf	4033,5,c	;volatile
  2810                           
  2811                           ;system.c: 36: ADCON2bits.ACQT2 = 0;
  2812  001C04  9AC0               	bcf	4032,5,c	;volatile
  2813                           
  2814                           ;system.c: 37: ADCON2bits.ACQT1 = 1;
  2815  001C06  88C0               	bsf	4032,4,c	;volatile
  2816                           
  2817                           ;system.c: 38: ADCON2bits.ACQT0 = 0;
  2818  001C08  96C0               	bcf	4032,3,c	;volatile
  2819                           
  2820                           ;system.c: 41: ADCON2bits.ADCS2 = 0;
  2821  001C0A  94C0               	bcf	4032,2,c	;volatile
  2822                           
  2823                           ;system.c: 42: ADCON2bits.ADCS1 = 1;
  2824  001C0C  82C0               	bsf	4032,1,c	;volatile
  2825                           
  2826                           ;system.c: 43: ADCON2bits.ADCS0 = 0;
  2827  001C0E  90C0               	bcf	4032,0,c	;volatile
  2828                           
  2829                           ;system.c: 47: TRISAbits.TRISA0 = 1;
  2830  001C10  8092               	bsf	3986,0,c	;volatile
  2831                           
  2832                           ;system.c: 48: TRISAbits.TRISA1 = 1;
  2833  001C12  8292               	bsf	3986,1,c	;volatile
  2834                           
  2835                           ;system.c: 49: TRISAbits.TRISA2 = 1;
  2836  001C14  8492               	bsf	3986,2,c	;volatile
  2837                           
  2838                           ;system.c: 50: TRISAbits.TRISA3 = 1;
  2839  001C16  8692               	bsf	3986,3,c	;volatile
  2840                           
  2841                           ;system.c: 51: TRISAbits.TRISA5 = 1;
  2842  001C18  8A92               	bsf	3986,5,c	;volatile
  2843                           
  2844                           ;system.c: 52: TRISEbits.TRISE0 = 1;
  2845  001C1A  8096               	bsf	3990,0,c	;volatile
  2846                           
  2847                           ;system.c: 53: TRISEbits.TRISE1 = 1;
  2848  001C1C  8296               	bsf	3990,1,c	;volatile
  2849                           
  2850                           ;system.c: 54: TRISEbits.TRISE2 = 1;
  2851  001C1E  8496               	bsf	3990,2,c	;volatile
  2852                           
  2853                           ;system.c: 58: ADCON0bits.ADON = 1;
  2854  001C20  80C2               	bsf	4034,0,c	;volatile
  2855  001C22  0012               	return		;funcret
  2856  001C24                     __end_of_setAnalogIn:
  2857                           	opt stack 0
  2858                           tblptru	equ	0xFF8
  2859                           tblptrh	equ	0xFF7
  2860                           tblptrl	equ	0xFF6
  2861                           tablat	equ	0xFF5
  2862                           postinc0	equ	0xFEE
  2863                           wreg	equ	0xFE8
  2864                           postdec1	equ	0xFE5
  2865                           fsr1l	equ	0xFE1
  2866                           status	equ	0xFD8
  2867                           
  2868 ;; *************** function _setActuatorCntrl *****************
  2869 ;; Defined at:
  2870 ;;		line 61 in file "system.c"
  2871 ;; Parameters:    Size  Location     Type
  2872 ;;		None
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;		None
  2875 ;; Return value:  Size  Location     Type
  2876 ;;                  1    wreg      void 
  2877 ;; Registers used:
  2878 ;;		None
  2879 ;; Tracked objects:
  2880 ;;		On entry : 0/0
  2881 ;;		On exit  : 0/0
  2882 ;;		Unchanged: 0/0
  2883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2888 ;;Total ram usage:        0 bytes
  2889 ;; Hardware stack levels used:    1
  2890 ;; This function calls:
  2891 ;;		Nothing
  2892 ;; This function is called by:
  2893 ;;		_main
  2894 ;; This function uses a non-reentrant model
  2895 ;;
  2896                           
  2897                           	psect	text8
  2898  001C24                     __ptext8:
  2899                           	opt stack 0
  2900  001C24                     _setActuatorCntrl:
  2901                           	opt stack 30
  2902                           
  2903                           ;system.c: 64: TRISDbits.TRISD0 = 0;
  2904                           
  2905                           ;incstack = 0
  2906  001C24  9095               	bcf	3989,0,c	;volatile
  2907                           
  2908                           ;system.c: 65: TRISDbits.TRISD1 = 0;
  2909  001C26  9295               	bcf	3989,1,c	;volatile
  2910                           
  2911                           ;system.c: 66: TRISDbits.TRISD2 = 0;
  2912  001C28  9495               	bcf	3989,2,c	;volatile
  2913                           
  2914                           ;system.c: 67: TRISDbits.TRISD3 = 0;
  2915  001C2A  9695               	bcf	3989,3,c	;volatile
  2916                           
  2917                           ;system.c: 68: TRISDbits.TRISD4 = 0;
  2918  001C2C  9895               	bcf	3989,4,c	;volatile
  2919                           
  2920                           ;system.c: 69: TRISDbits.TRISD5 = 0;
  2921  001C2E  9A95               	bcf	3989,5,c	;volatile
  2922                           
  2923                           ;system.c: 70: TRISDbits.TRISD6 = 0;
  2924  001C30  9C95               	bcf	3989,6,c	;volatile
  2925                           
  2926                           ;system.c: 71: TRISDbits.TRISD7 = 0;
  2927  001C32  9E95               	bcf	3989,7,c	;volatile
  2928                           
  2929                           ;system.c: 73: TRISCbits.TRISC0 = 0;
  2930  001C34  9094               	bcf	3988,0,c	;volatile
  2931                           
  2932                           ;system.c: 74: TRISCbits.TRISC1 = 0;
  2933  001C36  9294               	bcf	3988,1,c	;volatile
  2934                           
  2935                           ;system.c: 75: TRISCbits.TRISC2 = 0;
  2936  001C38  9494               	bcf	3988,2,c	;volatile
  2937                           
  2938                           ;system.c: 76: TRISCbits.TRISC3 = 0;
  2939  001C3A  9694               	bcf	3988,3,c	;volatile
  2940                           
  2941                           ;system.c: 77: TRISCbits.TRISC4 = 0;
  2942  001C3C  9894               	bcf	3988,4,c	;volatile
  2943                           
  2944                           ;system.c: 78: TRISCbits.TRISC5 = 0;
  2945  001C3E  9A94               	bcf	3988,5,c	;volatile
  2946                           
  2947                           ;system.c: 82: TRISBbits.TRISB0 = 0;
  2948  001C40  9093               	bcf	3987,0,c	;volatile
  2949                           
  2950                           ;system.c: 83: TRISBbits.TRISB1 = 0;
  2951  001C42  9293               	bcf	3987,1,c	;volatile
  2952                           
  2953                           ;system.c: 86: TRISAbits.TRISA7 = 0;
  2954  001C44  9E92               	bcf	3986,7,c	;volatile
  2955  001C46  0012               	return		;funcret
  2956  001C48                     __end_of_setActuatorCntrl:
  2957                           	opt stack 0
  2958                           tblptru	equ	0xFF8
  2959                           tblptrh	equ	0xFF7
  2960                           tblptrl	equ	0xFF6
  2961                           tablat	equ	0xFF5
  2962                           postinc0	equ	0xFEE
  2963                           wreg	equ	0xFE8
  2964                           postdec1	equ	0xFE5
  2965                           fsr1l	equ	0xFE1
  2966                           status	equ	0xFD8
  2967                           
  2968 ;; *************** function _selectAN7 *****************
  2969 ;; Defined at:
  2970 ;;		line 68 in file "ADC_Config.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;		None
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;		None
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      void 
  2977 ;; Registers used:
  2978 ;;		wreg, status,2
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2988 ;;Total ram usage:        0 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; This function calls:
  2991 ;;		Nothing
  2992 ;; This function is called by:
  2993 ;;		_main
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           	psect	text9
  2998  001C9A                     __ptext9:
  2999                           	opt stack 0
  3000  001C9A                     _selectAN7:
  3001                           	opt stack 30
  3002                           
  3003                           ;ADC_Config.c: 70: ADCON0bits.CHS = 0x07;
  3004                           
  3005                           ;incstack = 0
  3006  001C9A  50C2               	movf	4034,w,c	;volatile
  3007  001C9C  0BC3               	andlw	-61
  3008  001C9E  091C               	iorlw	28
  3009  001CA0  6EC2               	movwf	4034,c	;volatile
  3010  001CA2  0012               	return		;funcret
  3011  001CA4                     __end_of_selectAN7:
  3012                           	opt stack 0
  3013                           tblptru	equ	0xFF8
  3014                           tblptrh	equ	0xFF7
  3015                           tblptrl	equ	0xFF6
  3016                           tablat	equ	0xFF5
  3017                           postinc0	equ	0xFEE
  3018                           wreg	equ	0xFE8
  3019                           postdec1	equ	0xFE5
  3020                           fsr1l	equ	0xFE1
  3021                           status	equ	0xFD8
  3022                           
  3023 ;; *************** function _selectAN6 *****************
  3024 ;; Defined at:
  3025 ;;		line 62 in file "ADC_Config.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;		None
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;		None
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  1    wreg      void 
  3032 ;; Registers used:
  3033 ;;		wreg, status,2
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3043 ;;Total ram usage:        0 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_main
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text10
  3053  001CA4                     __ptext10:
  3054                           	opt stack 0
  3055  001CA4                     _selectAN6:
  3056                           	opt stack 30
  3057                           
  3058                           ;ADC_Config.c: 64: ADCON0bits.CHS = 0x06;
  3059                           
  3060                           ;incstack = 0
  3061  001CA4  50C2               	movf	4034,w,c	;volatile
  3062  001CA6  0BC3               	andlw	-61
  3063  001CA8  0918               	iorlw	24
  3064  001CAA  6EC2               	movwf	4034,c	;volatile
  3065  001CAC  0012               	return		;funcret
  3066  001CAE                     __end_of_selectAN6:
  3067                           	opt stack 0
  3068                           tblptru	equ	0xFF8
  3069                           tblptrh	equ	0xFF7
  3070                           tblptrl	equ	0xFF6
  3071                           tablat	equ	0xFF5
  3072                           postinc0	equ	0xFEE
  3073                           wreg	equ	0xFE8
  3074                           postdec1	equ	0xFE5
  3075                           fsr1l	equ	0xFE1
  3076                           status	equ	0xFD8
  3077                           
  3078 ;; *************** function _selectAN5 *****************
  3079 ;; Defined at:
  3080 ;;		line 56 in file "ADC_Config.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;		None
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;		None
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      void 
  3087 ;; Registers used:
  3088 ;;		wreg, status,2
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3098 ;;Total ram usage:        0 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; This function calls:
  3101 ;;		Nothing
  3102 ;; This function is called by:
  3103 ;;		_main
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           	psect	text11
  3108  001CAE                     __ptext11:
  3109                           	opt stack 0
  3110  001CAE                     _selectAN5:
  3111                           	opt stack 30
  3112                           
  3113                           ;ADC_Config.c: 58: ADCON0bits.CHS = 0x05;
  3114                           
  3115                           ;incstack = 0
  3116  001CAE  50C2               	movf	4034,w,c	;volatile
  3117  001CB0  0BC3               	andlw	-61
  3118  001CB2  0914               	iorlw	20
  3119  001CB4  6EC2               	movwf	4034,c	;volatile
  3120  001CB6  0012               	return		;funcret
  3121  001CB8                     __end_of_selectAN5:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           postinc0	equ	0xFEE
  3128                           wreg	equ	0xFE8
  3129                           postdec1	equ	0xFE5
  3130                           fsr1l	equ	0xFE1
  3131                           status	equ	0xFD8
  3132                           
  3133 ;; *************** function _selectAN4 *****************
  3134 ;; Defined at:
  3135 ;;		line 50 in file "ADC_Config.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;		None
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;		None
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      void 
  3142 ;; Registers used:
  3143 ;;		wreg, status,2
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3153 ;;Total ram usage:        0 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; This function calls:
  3156 ;;		Nothing
  3157 ;; This function is called by:
  3158 ;;		_main
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text12
  3163  001CB8                     __ptext12:
  3164                           	opt stack 0
  3165  001CB8                     _selectAN4:
  3166                           	opt stack 30
  3167                           
  3168                           ;ADC_Config.c: 52: ADCON0bits.CHS = 0x04;
  3169                           
  3170                           ;incstack = 0
  3171  001CB8  50C2               	movf	4034,w,c	;volatile
  3172  001CBA  0BC3               	andlw	-61
  3173  001CBC  0910               	iorlw	16
  3174  001CBE  6EC2               	movwf	4034,c	;volatile
  3175  001CC0  0012               	return		;funcret
  3176  001CC2                     __end_of_selectAN4:
  3177                           	opt stack 0
  3178                           tblptru	equ	0xFF8
  3179                           tblptrh	equ	0xFF7
  3180                           tblptrl	equ	0xFF6
  3181                           tablat	equ	0xFF5
  3182                           postinc0	equ	0xFEE
  3183                           wreg	equ	0xFE8
  3184                           postdec1	equ	0xFE5
  3185                           fsr1l	equ	0xFE1
  3186                           status	equ	0xFD8
  3187                           
  3188 ;; *************** function _selectAN3 *****************
  3189 ;; Defined at:
  3190 ;;		line 44 in file "ADC_Config.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;		None
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;		None
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  1    wreg      void 
  3197 ;; Registers used:
  3198 ;;		wreg, status,2
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3208 ;;Total ram usage:        0 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; This function calls:
  3211 ;;		Nothing
  3212 ;; This function is called by:
  3213 ;;		_main
  3214 ;; This function uses a non-reentrant model
  3215 ;;
  3216                           
  3217                           	psect	text13
  3218  001CC2                     __ptext13:
  3219                           	opt stack 0
  3220  001CC2                     _selectAN3:
  3221                           	opt stack 30
  3222                           
  3223                           ;ADC_Config.c: 46: ADCON0bits.CHS = 0x03;
  3224                           
  3225                           ;incstack = 0
  3226  001CC2  50C2               	movf	4034,w,c	;volatile
  3227  001CC4  0BC3               	andlw	-61
  3228  001CC6  090C               	iorlw	12
  3229  001CC8  6EC2               	movwf	4034,c	;volatile
  3230  001CCA  0012               	return		;funcret
  3231  001CCC                     __end_of_selectAN3:
  3232                           	opt stack 0
  3233                           tblptru	equ	0xFF8
  3234                           tblptrh	equ	0xFF7
  3235                           tblptrl	equ	0xFF6
  3236                           tablat	equ	0xFF5
  3237                           postinc0	equ	0xFEE
  3238                           wreg	equ	0xFE8
  3239                           postdec1	equ	0xFE5
  3240                           fsr1l	equ	0xFE1
  3241                           status	equ	0xFD8
  3242                           
  3243 ;; *************** function _selectAN2 *****************
  3244 ;; Defined at:
  3245 ;;		line 38 in file "ADC_Config.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;		None
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;		None
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  1    wreg      void 
  3252 ;; Registers used:
  3253 ;;		wreg, status,2
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3263 ;;Total ram usage:        0 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; This function calls:
  3266 ;;		Nothing
  3267 ;; This function is called by:
  3268 ;;		_main
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text14
  3273  001CCC                     __ptext14:
  3274                           	opt stack 0
  3275  001CCC                     _selectAN2:
  3276                           	opt stack 30
  3277                           
  3278                           ;ADC_Config.c: 40: ADCON0bits.CHS = 0x02;
  3279                           
  3280                           ;incstack = 0
  3281  001CCC  50C2               	movf	4034,w,c	;volatile
  3282  001CCE  0BC3               	andlw	-61
  3283  001CD0  0908               	iorlw	8
  3284  001CD2  6EC2               	movwf	4034,c	;volatile
  3285  001CD4  0012               	return		;funcret
  3286  001CD6                     __end_of_selectAN2:
  3287                           	opt stack 0
  3288                           tblptru	equ	0xFF8
  3289                           tblptrh	equ	0xFF7
  3290                           tblptrl	equ	0xFF6
  3291                           tablat	equ	0xFF5
  3292                           postinc0	equ	0xFEE
  3293                           wreg	equ	0xFE8
  3294                           postdec1	equ	0xFE5
  3295                           fsr1l	equ	0xFE1
  3296                           status	equ	0xFD8
  3297                           
  3298 ;; *************** function _selectAN1 *****************
  3299 ;; Defined at:
  3300 ;;		line 32 in file "ADC_Config.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;		None
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;		None
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      void 
  3307 ;; Registers used:
  3308 ;;		wreg, status,2
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3318 ;;Total ram usage:        0 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; This function calls:
  3321 ;;		Nothing
  3322 ;; This function is called by:
  3323 ;;		_main
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           	psect	text15
  3328  001CD6                     __ptext15:
  3329                           	opt stack 0
  3330  001CD6                     _selectAN1:
  3331                           	opt stack 30
  3332                           
  3333                           ;ADC_Config.c: 34: ADCON0bits.CHS = 0x01;
  3334                           
  3335                           ;incstack = 0
  3336  001CD6  50C2               	movf	4034,w,c	;volatile
  3337  001CD8  0BC3               	andlw	-61
  3338  001CDA  0904               	iorlw	4
  3339  001CDC  6EC2               	movwf	4034,c	;volatile
  3340  001CDE  0012               	return		;funcret
  3341  001CE0                     __end_of_selectAN1:
  3342                           	opt stack 0
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           tblptrl	equ	0xFF6
  3346                           tablat	equ	0xFF5
  3347                           postinc0	equ	0xFEE
  3348                           wreg	equ	0xFE8
  3349                           postdec1	equ	0xFE5
  3350                           fsr1l	equ	0xFE1
  3351                           status	equ	0xFD8
  3352                           
  3353 ;; *************** function _selectAN0 *****************
  3354 ;; Defined at:
  3355 ;;		line 26 in file "ADC_Config.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;		None
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;		None
  3360 ;; Return value:  Size  Location     Type
  3361 ;;                  1    wreg      void 
  3362 ;; Registers used:
  3363 ;;		None
  3364 ;; Tracked objects:
  3365 ;;		On entry : 0/0
  3366 ;;		On exit  : 0/0
  3367 ;;		Unchanged: 0/0
  3368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3373 ;;Total ram usage:        0 bytes
  3374 ;; Hardware stack levels used:    1
  3375 ;; This function calls:
  3376 ;;		Nothing
  3377 ;; This function is called by:
  3378 ;;		_main
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           	psect	text16
  3383  001CE0                     __ptext16:
  3384                           	opt stack 0
  3385  001CE0                     _selectAN0:
  3386                           	opt stack 30
  3387                           
  3388                           ;ADC_Config.c: 28: ADCON0bits.CHS = 0x00;
  3389                           
  3390                           ;incstack = 0
  3391  001CE0  94C2               	bcf	4034,2,c	;volatile
  3392  001CE2  96C2               	bcf	4034,3,c	;volatile
  3393  001CE4  98C2               	bcf	4034,4,c	;volatile
  3394  001CE6  9AC2               	bcf	4034,5,c	;volatile
  3395  001CE8  0012               	return		;funcret
  3396  001CEA                     __end_of_selectAN0:
  3397                           	opt stack 0
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           postinc0	equ	0xFEE
  3403                           wreg	equ	0xFE8
  3404                           postdec1	equ	0xFE5
  3405                           fsr1l	equ	0xFE1
  3406                           status	equ	0xFD8
  3407                           
  3408 ;; *************** function _readADC *****************
  3409 ;; Defined at:
  3410 ;;		line 73 in file "ADC_Config.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;		None
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  digitalVal      2    2[COMRAM] unsigned int 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  2    0[COMRAM] unsigned int 
  3417 ;; Registers used:
  3418 ;;		wreg, status,2
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3424 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3425 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3427 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3428 ;;Total ram usage:        4 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; This function calls:
  3431 ;;		Nothing
  3432 ;; This function is called by:
  3433 ;;		_main
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           	psect	text17
  3438  001C48                     __ptext17:
  3439                           	opt stack 0
  3440  001C48                     _readADC:
  3441                           	opt stack 30
  3442                           
  3443                           ;ADC_Config.c: 75: unsigned int digitalVal;
  3444                           ;ADC_Config.c: 77: ADCON0bits.GO_NOT_DONE = 1;
  3445                           
  3446                           ;incstack = 0
  3447  001C48  82C2               	bsf	4034,1,c	;volatile
  3448  001C4A                     l169:
  3449  001C4A  B2C2               	btfsc	4034,1,c	;volatile
  3450  001C4C  D7FE               	goto	l169
  3451                           
  3452                           ;ADC_Config.c: 83: digitalVal = ADRESL;
  3453  001C4E  CFC3 F003          	movff	4035,readADC@digitalVal	;volatile
  3454  001C52  6A04               	clrf	readADC@digitalVal+1,c
  3455                           
  3456                           ;ADC_Config.c: 84: digitalVal += ADRESH << 8;
  3457  001C54  50C4               	movf	4036,w,c	;volatile
  3458  001C56  2604               	addwf	readADC@digitalVal+1,f,c
  3459                           
  3460                           ;ADC_Config.c: 85: return digitalVal;
  3461  001C58  C003  F001         	movff	readADC@digitalVal,?_readADC
  3462  001C5C  C004  F002         	movff	readADC@digitalVal+1,?_readADC+1
  3463  001C60  0012               	return	
  3464  001C62                     __end_of_readADC:
  3465                           	opt stack 0
  3466                           tblptru	equ	0xFF8
  3467                           tblptrh	equ	0xFF7
  3468                           tblptrl	equ	0xFF6
  3469                           tablat	equ	0xFF5
  3470                           postinc0	equ	0xFEE
  3471                           wreg	equ	0xFE8
  3472                           postdec1	equ	0xFE5
  3473                           fsr1l	equ	0xFE1
  3474                           status	equ	0xFD8
  3475                           
  3476 ;; *************** function _movement *****************
  3477 ;; Defined at:
  3478 ;;		line 31 in file "movements.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;  current_pos     2    0[COMRAM] unsigned int 
  3481 ;;  set_point       2    2[COMRAM] unsigned int 
  3482 ;;  actuator        2    4[COMRAM] int 
  3483 ;;  margin          2    6[COMRAM] PTR int 
  3484 ;;		 -> margin7(2), margin6(2), margin5(2), margin4(2), 
  3485 ;;		 -> margin3(2), margin2(2), margin1(2), margin0(2), 
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;  move1           2   12[COMRAM] int 
  3488 ;;  move0           2   10[COMRAM] int 
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  1    wreg      void 
  3491 ;; Registers used:
  3492 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3498 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3499 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3500 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3501 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3502 ;;Total ram usage:       14 bytes
  3503 ;; Hardware stack levels used:    1
  3504 ;; This function calls:
  3505 ;;		Nothing
  3506 ;; This function is called by:
  3507 ;;		_main
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           	psect	text18
  3512  0017DE                     __ptext18:
  3513                           	opt stack 0
  3514  0017DE                     _movement:
  3515                           	opt stack 30
  3516                           
  3517                           ;movements.c: 33: int move0;
  3518                           ;movements.c: 34: int move1;
  3519                           ;movements.c: 36: if(*margin == 0)
  3520                           
  3521                           ;incstack = 0
  3522  0017DE  C007  FFD9         	movff	movement@margin,fsr2l
  3523  0017E2  C008  FFDA         	movff	movement@margin+1,fsr2h
  3524  0017E6  50DE               	movf	postinc2,w,c
  3525  0017E8  10DE               	iorwf	postinc2,w,c
  3526  0017EA  A4D8               	btfss	status,2,c
  3527  0017EC  D02B               	goto	l1645
  3528                           
  3529                           ;movements.c: 37: {
  3530                           ;movements.c: 38: if (current_pos < set_point)
  3531  0017EE  5003               	movf	movement@set_point,w,c
  3532  0017F0  5C01               	subwf	movement@current_pos,w,c
  3533  0017F2  5004               	movf	movement@set_point+1,w,c
  3534  0017F4  5802               	subwfb	movement@current_pos+1,w,c
  3535  0017F6  B0D8               	btfsc	status,0,c
  3536  0017F8  D008               	goto	l1637
  3537                           
  3538                           ;movements.c: 39: {
  3539                           ;movements.c: 40: move0 = 0;
  3540  0017FA  0E00               	movlw	0
  3541  0017FC  6E0C               	movwf	movement@move0+1,c
  3542  0017FE  0E00               	movlw	0
  3543  001800  6E0B               	movwf	movement@move0,c
  3544                           
  3545                           ;movements.c: 41: move1 = 1;
  3546  001802  0E00               	movlw	0
  3547  001804  6E0E               	movwf	movement@move1+1,c
  3548  001806  0E01               	movlw	1
  3549  001808  D00A               	goto	L1
  3550  00180A                     l1637:
  3551  00180A  5001               	movf	movement@current_pos,w,c
  3552  00180C  5C03               	subwf	movement@set_point,w,c
  3553  00180E  5002               	movf	movement@current_pos+1,w,c
  3554  001810  5804               	subwfb	movement@set_point+1,w,c
  3555  001812  B0D8               	btfsc	status,0,c
  3556  001814  D006               	goto	l1641
  3557                           
  3558                           ;movements.c: 43: {
  3559                           ;movements.c: 44: move0 = 1;
  3560  001816  0E00               	movlw	0
  3561  001818  6E0C               	movwf	movement@move0+1,c
  3562  00181A  0E01               	movlw	1
  3563  00181C  D016               	goto	L2
  3564  00181E                     L1:
  3565  00181E  6E0D               	movwf	movement@move1,c
  3566                           
  3567                           ;movements.c: 46: } else
  3568  001820  D019               	goto	l1647
  3569  001822                     l1641:
  3570                           
  3571                           ;movements.c: 47: {
  3572                           ;movements.c: 48: move0 = 0;
  3573  001822  0E00               	movlw	0
  3574  001824  6E0C               	movwf	movement@move0+1,c
  3575  001826  0E00               	movlw	0
  3576  001828  6E0B               	movwf	movement@move0,c
  3577                           
  3578                           ;movements.c: 49: move1 = 0;
  3579  00182A  0E00               	movlw	0
  3580  00182C  6E0E               	movwf	movement@move1+1,c
  3581  00182E  0E00               	movlw	0
  3582  001830  6E0D               	movwf	movement@move1,c
  3583                           
  3584                           ;movements.c: 50: *margin = 1;
  3585  001832  C007  FFD9         	movff	movement@margin,fsr2l
  3586  001836  C008  FFDA         	movff	movement@margin+1,fsr2h
  3587  00183A  0E01               	movlw	1
  3588  00183C  6EDE               	movwf	postinc2,c
  3589  00183E  0E00               	movlw	0
  3590  001840  6EDD               	movwf	postdec2,c
  3591                           
  3592                           ;movements.c: 51: }
  3593                           ;movements.c: 52: } else
  3594  001842  D008               	goto	l1647
  3595  001844                     l1645:
  3596                           
  3597                           ;movements.c: 53: {
  3598                           ;movements.c: 54: move0 = 0;
  3599  001844  0E00               	movlw	0
  3600  001846  6E0C               	movwf	movement@move0+1,c
  3601  001848  0E00               	movlw	0
  3602  00184A                     L2:
  3603  00184A  6E0B               	movwf	movement@move0,c
  3604                           
  3605                           ;movements.c: 55: move1 = 0;
  3606  00184C  0E00               	movlw	0
  3607  00184E  6E0E               	movwf	movement@move1+1,c
  3608  001850  0E00               	movlw	0
  3609  001852  D7E5               	goto	L1
  3610  001854                     l1647:
  3611                           
  3612                           ;movements.c: 56: }
  3613                           ;movements.c: 58: if(actuator == 0)
  3614  001854  5005               	movf	movement@actuator,w,c
  3615  001856  1006               	iorwf	movement@actuator+1,w,c
  3616  001858  A4D8               	btfss	status,2,c
  3617  00185A  D00B               	goto	l1651
  3618                           
  3619                           ;movements.c: 59: {
  3620                           ;movements.c: 60: LATCbits.LATC0 = move0;
  3621  00185C  B00B               	btfsc	movement@move0,0,c
  3622  00185E  D002               	bra	u1105
  3623  001860  908B               	bcf	3979,0,c	;volatile
  3624  001862  D001               	bra	u1106
  3625  001864                     u1105:
  3626  001864  808B               	bsf	3979,0,c	;volatile
  3627  001866                     u1106:
  3628                           
  3629                           ;movements.c: 61: LATCbits.LATC1 = move1;
  3630  001866  B00D               	btfsc	movement@move1,0,c
  3631  001868  D002               	bra	u1115
  3632  00186A  928B               	bcf	3979,1,c	;volatile
  3633  00186C  D001               	bra	u1116
  3634  00186E                     u1115:
  3635  00186E  828B               	bsf	3979,1,c	;volatile
  3636  001870                     u1116:
  3637                           
  3638                           ;movements.c: 62: } else if (actuator == 1)
  3639  001870  0012               	return	
  3640  001872                     l1651:
  3641  001872  0405               	decf	movement@actuator,w,c
  3642  001874  1006               	iorwf	movement@actuator+1,w,c
  3643  001876  A4D8               	btfss	status,2,c
  3644  001878  D00B               	goto	l1655
  3645                           
  3646                           ;movements.c: 63: {
  3647                           ;movements.c: 64: LATCbits.LATC2 = move0;
  3648  00187A  B00B               	btfsc	movement@move0,0,c
  3649  00187C  D002               	bra	u1135
  3650  00187E  948B               	bcf	3979,2,c	;volatile
  3651  001880  D001               	bra	u1136
  3652  001882                     u1135:
  3653  001882  848B               	bsf	3979,2,c	;volatile
  3654  001884                     u1136:
  3655                           
  3656                           ;movements.c: 65: LATCbits.LATC3 = move1;
  3657  001884  B00D               	btfsc	movement@move1,0,c
  3658  001886  D002               	bra	u1145
  3659  001888  968B               	bcf	3979,3,c	;volatile
  3660  00188A  D001               	bra	u1146
  3661  00188C                     u1145:
  3662  00188C  868B               	bsf	3979,3,c	;volatile
  3663  00188E                     u1146:
  3664                           
  3665                           ;movements.c: 66: } else if (actuator == 2)
  3666  00188E  0012               	return	
  3667  001890                     l1655:
  3668  001890  0E02               	movlw	2
  3669  001892  1805               	xorwf	movement@actuator,w,c
  3670  001894  1006               	iorwf	movement@actuator+1,w,c
  3671  001896  A4D8               	btfss	status,2,c
  3672  001898  D00B               	goto	l1659
  3673                           
  3674                           ;movements.c: 67: {
  3675                           ;movements.c: 68: LATDbits.LATD0 = move0;
  3676  00189A  B00B               	btfsc	movement@move0,0,c
  3677  00189C  D002               	bra	u1165
  3678  00189E  908C               	bcf	3980,0,c	;volatile
  3679  0018A0  D001               	bra	u1166
  3680  0018A2                     u1165:
  3681  0018A2  808C               	bsf	3980,0,c	;volatile
  3682  0018A4                     u1166:
  3683                           
  3684                           ;movements.c: 69: LATDbits.LATD1 = move1;
  3685  0018A4  B00D               	btfsc	movement@move1,0,c
  3686  0018A6  D002               	bra	u1175
  3687  0018A8  928C               	bcf	3980,1,c	;volatile
  3688  0018AA  D001               	bra	u1176
  3689  0018AC                     u1175:
  3690  0018AC  828C               	bsf	3980,1,c	;volatile
  3691  0018AE                     u1176:
  3692                           
  3693                           ;movements.c: 70: } else if (actuator == 3)
  3694  0018AE  0012               	return	
  3695  0018B0                     l1659:
  3696  0018B0  0E03               	movlw	3
  3697  0018B2  1805               	xorwf	movement@actuator,w,c
  3698  0018B4  1006               	iorwf	movement@actuator+1,w,c
  3699  0018B6  A4D8               	btfss	status,2,c
  3700  0018B8  D00B               	goto	l1663
  3701                           
  3702                           ;movements.c: 71: {
  3703                           ;movements.c: 72: LATDbits.LATD2 = move0;
  3704  0018BA  B00B               	btfsc	movement@move0,0,c
  3705  0018BC  D002               	bra	u1195
  3706  0018BE  948C               	bcf	3980,2,c	;volatile
  3707  0018C0  D001               	bra	u1196
  3708  0018C2                     u1195:
  3709  0018C2  848C               	bsf	3980,2,c	;volatile
  3710  0018C4                     u1196:
  3711                           
  3712                           ;movements.c: 73: LATDbits.LATD3 = move1;
  3713  0018C4  B00D               	btfsc	movement@move1,0,c
  3714  0018C6  D002               	bra	u1205
  3715  0018C8  968C               	bcf	3980,3,c	;volatile
  3716  0018CA  D001               	bra	u1206
  3717  0018CC                     u1205:
  3718  0018CC  868C               	bsf	3980,3,c	;volatile
  3719  0018CE                     u1206:
  3720                           
  3721                           ;movements.c: 74: } else if (actuator == 4)
  3722  0018CE  0012               	return	
  3723  0018D0                     l1663:
  3724  0018D0  0E04               	movlw	4
  3725  0018D2  1805               	xorwf	movement@actuator,w,c
  3726  0018D4  1006               	iorwf	movement@actuator+1,w,c
  3727  0018D6  A4D8               	btfss	status,2,c
  3728  0018D8  D00B               	goto	l1667
  3729                           
  3730                           ;movements.c: 75: {
  3731                           ;movements.c: 76: LATCbits.LATC4 = move0;
  3732  0018DA  B00B               	btfsc	movement@move0,0,c
  3733  0018DC  D002               	bra	u1225
  3734  0018DE  988B               	bcf	3979,4,c	;volatile
  3735  0018E0  D001               	bra	u1226
  3736  0018E2                     u1225:
  3737  0018E2  888B               	bsf	3979,4,c	;volatile
  3738  0018E4                     u1226:
  3739                           
  3740                           ;movements.c: 77: LATCbits.LATC5 = move1;
  3741  0018E4  B00D               	btfsc	movement@move1,0,c
  3742  0018E6  D002               	bra	u1235
  3743  0018E8  9A8B               	bcf	3979,5,c	;volatile
  3744  0018EA  D001               	bra	u1236
  3745  0018EC                     u1235:
  3746  0018EC  8A8B               	bsf	3979,5,c	;volatile
  3747  0018EE                     u1236:
  3748                           
  3749                           ;movements.c: 78: } else if (actuator == 5)
  3750  0018EE  0012               	return	
  3751  0018F0                     l1667:
  3752  0018F0  0E05               	movlw	5
  3753  0018F2  1805               	xorwf	movement@actuator,w,c
  3754  0018F4  1006               	iorwf	movement@actuator+1,w,c
  3755  0018F6  A4D8               	btfss	status,2,c
  3756  0018F8  D00B               	goto	l1671
  3757                           
  3758                           ;movements.c: 79: {
  3759                           ;movements.c: 80: LATBbits.LATB0 = move0;
  3760  0018FA  B00B               	btfsc	movement@move0,0,c
  3761  0018FC  D002               	bra	u1255
  3762  0018FE  908A               	bcf	3978,0,c	;volatile
  3763  001900  D001               	bra	u1256
  3764  001902                     u1255:
  3765  001902  808A               	bsf	3978,0,c	;volatile
  3766  001904                     u1256:
  3767                           
  3768                           ;movements.c: 81: LATBbits.LATB1 = move1;
  3769  001904  B00D               	btfsc	movement@move1,0,c
  3770  001906  D002               	bra	u1265
  3771  001908  928A               	bcf	3978,1,c	;volatile
  3772  00190A  D001               	bra	u1266
  3773  00190C                     u1265:
  3774  00190C  828A               	bsf	3978,1,c	;volatile
  3775  00190E                     u1266:
  3776                           
  3777                           ;movements.c: 82: } else if (actuator == 6)
  3778  00190E  0012               	return	
  3779  001910                     l1671:
  3780  001910  0E06               	movlw	6
  3781  001912  1805               	xorwf	movement@actuator,w,c
  3782  001914  1006               	iorwf	movement@actuator+1,w,c
  3783  001916  A4D8               	btfss	status,2,c
  3784  001918  D00B               	goto	l1675
  3785                           
  3786                           ;movements.c: 83: {
  3787                           ;movements.c: 84: LATDbits.LATD4 = move0;
  3788  00191A  B00B               	btfsc	movement@move0,0,c
  3789  00191C  D002               	bra	u1285
  3790  00191E  988C               	bcf	3980,4,c	;volatile
  3791  001920  D001               	bra	u1286
  3792  001922                     u1285:
  3793  001922  888C               	bsf	3980,4,c	;volatile
  3794  001924                     u1286:
  3795                           
  3796                           ;movements.c: 85: LATDbits.LATD5 = move1;
  3797  001924  B00D               	btfsc	movement@move1,0,c
  3798  001926  D002               	bra	u1295
  3799  001928  9A8C               	bcf	3980,5,c	;volatile
  3800  00192A  D001               	bra	u1296
  3801  00192C                     u1295:
  3802  00192C  8A8C               	bsf	3980,5,c	;volatile
  3803  00192E                     u1296:
  3804                           
  3805                           ;movements.c: 86: } else if (actuator == 7)
  3806  00192E  0012               	return	
  3807  001930                     l1675:
  3808  001930  0E07               	movlw	7
  3809  001932  1805               	xorwf	movement@actuator,w,c
  3810  001934  1006               	iorwf	movement@actuator+1,w,c
  3811  001936  A4D8               	btfss	status,2,c
  3812  001938  0012               	return	
  3813                           
  3814                           ;movements.c: 87: {
  3815                           ;movements.c: 88: LATDbits.LATD6 = move0;
  3816  00193A  B00B               	btfsc	movement@move0,0,c
  3817  00193C  D002               	bra	u1315
  3818  00193E  9C8C               	bcf	3980,6,c	;volatile
  3819  001940  D001               	bra	u1316
  3820  001942                     u1315:
  3821  001942  8C8C               	bsf	3980,6,c	;volatile
  3822  001944                     u1316:
  3823                           
  3824                           ;movements.c: 89: LATDbits.LATD7 = move1;
  3825  001944  B00D               	btfsc	movement@move1,0,c
  3826  001946  D002               	bra	u1325
  3827  001948  9E8C               	bcf	3980,7,c	;volatile
  3828  00194A  D001               	bra	u1326
  3829  00194C                     u1325:
  3830  00194C  8E8C               	bsf	3980,7,c	;volatile
  3831  00194E                     u1326:
  3832  00194E  0012               	return	
  3833  001950                     __end_of_movement:
  3834                           	opt stack 0
  3835                           tblptru	equ	0xFF8
  3836                           tblptrh	equ	0xFF7
  3837                           tblptrl	equ	0xFF6
  3838                           tablat	equ	0xFF5
  3839                           postinc0	equ	0xFEE
  3840                           wreg	equ	0xFE8
  3841                           postdec1	equ	0xFE5
  3842                           fsr1l	equ	0xFE1
  3843                           postinc2	equ	0xFDE
  3844                           postdec2	equ	0xFDD
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _ecan_init *****************
  3850 ;; Defined at:
  3851 ;;		line 11 in file "can.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;		None
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  mask0           2    4[COMRAM] short 
  3856 ;;  sid0            2    2[COMRAM] short 
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      void 
  3859 ;; Registers used:
  3860 ;;		wreg, status,2, status,0
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3867 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3868 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3869 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3870 ;;Total ram usage:        6 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_main
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text19
  3880  001A1C                     __ptext19:
  3881                           	opt stack 0
  3882  001A1C                     _ecan_init:
  3883                           	opt stack 30
  3884                           
  3885                           ;can.c: 14: TRISBbits.TRISB2 = 0;
  3886                           
  3887                           ;incstack = 0
  3888  001A1C  9493               	bcf	3987,2,c	;volatile
  3889                           
  3890                           ;can.c: 15: TRISBbits.TRISB3 = 1;
  3891  001A1E  8693               	bsf	3987,3,c	;volatile
  3892                           
  3893                           ;can.c: 18: CANCONbits.REQOP2 = 1;
  3894  001A20  8E6F               	bsf	3951,7,c	;volatile
  3895  001A22                     l277:
  3896  001A22  AE6E               	btfss	3950,7,c	;volatile
  3897  001A24  AC6E               	btfss	3950,6,c	;volatile
  3898  001A26  D002               	goto	l281
  3899  001A28  BA6E               	btfsc	3950,5,c	;volatile
  3900  001A2A  D7FB               	goto	l277
  3901  001A2C                     l281:
  3902                           
  3903                           ;can.c: 26: CIOCONbits.ENDRHI = 0;
  3904  001A2C  9A73               	bcf	3955,5,c	;volatile
  3905                           
  3906                           ;can.c: 29: BRGCON1bits.SJW1 = 0;
  3907  001A2E  9E70               	bcf	3952,7,c	;volatile
  3908                           
  3909                           ;can.c: 30: BRGCON1bits.SJW0 = 0;
  3910  001A30  9C70               	bcf	3952,6,c	;volatile
  3911                           
  3912                           ;can.c: 31: BRGCON1bits.BRP5 = 0;
  3913  001A32  9A70               	bcf	3952,5,c	;volatile
  3914                           
  3915                           ;can.c: 32: BRGCON1bits.BRP4 = 0;
  3916  001A34  9870               	bcf	3952,4,c	;volatile
  3917                           
  3918                           ;can.c: 33: BRGCON1bits.BRP3 = 0;
  3919  001A36  9670               	bcf	3952,3,c	;volatile
  3920                           
  3921                           ;can.c: 34: BRGCON1bits.BRP2 = 0;
  3922  001A38  9470               	bcf	3952,2,c	;volatile
  3923                           
  3924                           ;can.c: 35: BRGCON1bits.BRP1 = 0;
  3925  001A3A  9270               	bcf	3952,1,c	;volatile
  3926                           
  3927                           ;can.c: 36: BRGCON1bits.BRP0 = 1;
  3928  001A3C  8070               	bsf	3952,0,c	;volatile
  3929                           
  3930                           ;can.c: 38: BRGCON2bits.SEG2PHTS = 1;
  3931  001A3E  8E71               	bsf	3953,7,c	;volatile
  3932                           
  3933                           ;can.c: 39: BRGCON2bits.SAM = 1;
  3934  001A40  8C71               	bsf	3953,6,c	;volatile
  3935                           
  3936                           ;can.c: 40: BRGCON2bits.SEG1PH2 = 0;
  3937  001A42  9A71               	bcf	3953,5,c	;volatile
  3938                           
  3939                           ;can.c: 41: BRGCON2bits.SEG1PH1 = 0;
  3940  001A44  9871               	bcf	3953,4,c	;volatile
  3941                           
  3942                           ;can.c: 42: BRGCON2bits.SEG1PH0 = 1;
  3943  001A46  8671               	bsf	3953,3,c	;volatile
  3944                           
  3945                           ;can.c: 43: BRGCON2bits.PRSEG2 = 0;
  3946  001A48  9471               	bcf	3953,2,c	;volatile
  3947                           
  3948                           ;can.c: 44: BRGCON2bits.PRSEG1 = 1;
  3949  001A4A  8271               	bsf	3953,1,c	;volatile
  3950                           
  3951                           ;can.c: 45: BRGCON2bits.PRSEG0 = 0;
  3952  001A4C  9071               	bcf	3953,0,c	;volatile
  3953                           
  3954                           ;can.c: 49: BRGCON3bits.SEG2PH2 = 0;
  3955  001A4E  9472               	bcf	3954,2,c	;volatile
  3956                           
  3957                           ;can.c: 50: BRGCON3bits. SEG2PH1 = 0;
  3958  001A50  9272               	bcf	3954,1,c	;volatile
  3959                           
  3960                           ;can.c: 51: BRGCON3bits. SEG2PH0 = 1;
  3961  001A52  8072               	bsf	3954,0,c	;volatile
  3962                           
  3963                           ;can.c: 54: ECANCONbits.MDSEL1 = 0;
  3964  001A54  9E77               	bcf	3959,7,c	;volatile
  3965                           
  3966                           ;can.c: 55: ECANCONbits.MDSEL0 = 0;
  3967  001A56  9C77               	bcf	3959,6,c	;volatile
  3968                           
  3969                           ;can.c: 62: RXB0CONbits.RXM1 = 0;
  3970  001A58  9C60               	bcf	3936,6,c	;volatile
  3971                           
  3972                           ;can.c: 63: RXB0CONbits.RXM0 = 1;
  3973  001A5A  8A60               	bsf	3936,5,c	;volatile
  3974                           
  3975                           ;can.c: 78: short sid0 = 0x00A;
  3976  001A5C  0E00               	movlw	0
  3977  001A5E  6E04               	movwf	ecan_init@sid0+1,c
  3978  001A60  0E0A               	movlw	10
  3979  001A62  6E03               	movwf	ecan_init@sid0,c
  3980                           
  3981                           ;can.c: 79: short mask0 = 0x7FF;
  3982  001A64  0E07               	movlw	7
  3983  001A66  6E06               	movwf	ecan_init@mask0+1,c
  3984  001A68  6805               	setf	ecan_init@mask0,c
  3985                           
  3986                           ;can.c: 81: RXF0SIDH = sid0 >> 3;
  3987  001A6A  C003  F001         	movff	ecan_init@sid0,??_ecan_init
  3988  001A6E  C004  F002         	movff	ecan_init@sid0+1,??_ecan_init+1
  3989  001A72  3402               	rlcf	??_ecan_init+1,w,c
  3990  001A74  3202               	rrcf	??_ecan_init+1,f,c
  3991  001A76  3201               	rrcf	??_ecan_init,f,c
  3992  001A78  3402               	rlcf	??_ecan_init+1,w,c
  3993  001A7A  3202               	rrcf	??_ecan_init+1,f,c
  3994  001A7C  3201               	rrcf	??_ecan_init,f,c
  3995  001A7E  3402               	rlcf	??_ecan_init+1,w,c
  3996  001A80  3202               	rrcf	??_ecan_init+1,f,c
  3997  001A82  3201               	rrcf	??_ecan_init,f,c
  3998  001A84  5001               	movf	??_ecan_init,w,c
  3999  001A86  010F               	movlb	15	; () banked
  4000  001A88  6F00               	movwf	0,b	;volatile
  4001                           
  4002                           ; BSR set to: 15
  4003                           ;can.c: 82: RXF0SIDL = sid0 << 5;
  4004  001A8A  3803               	swapf	ecan_init@sid0,w,c
  4005  001A8C  46E8               	rlncf	wreg,f,c
  4006  001A8E  0BE0               	andlw	224
  4007  001A90  010F               	movlb	15	; () banked
  4008  001A92  6F01               	movwf	1,b	;volatile
  4009                           
  4010                           ; BSR set to: 15
  4011                           ;can.c: 83: RXM0SIDH = mask0 >> 3;
  4012  001A94  C005  F001         	movff	ecan_init@mask0,??_ecan_init
  4013  001A98  C006  F002         	movff	ecan_init@mask0+1,??_ecan_init+1
  4014  001A9C  3402               	rlcf	??_ecan_init+1,w,c
  4015  001A9E  3202               	rrcf	??_ecan_init+1,f,c
  4016  001AA0  3201               	rrcf	??_ecan_init,f,c
  4017  001AA2  3402               	rlcf	??_ecan_init+1,w,c
  4018  001AA4  3202               	rrcf	??_ecan_init+1,f,c
  4019  001AA6  3201               	rrcf	??_ecan_init,f,c
  4020  001AA8  3402               	rlcf	??_ecan_init+1,w,c
  4021  001AAA  3202               	rrcf	??_ecan_init+1,f,c
  4022  001AAC  3201               	rrcf	??_ecan_init,f,c
  4023  001AAE  5001               	movf	??_ecan_init,w,c
  4024  001AB0  010F               	movlb	15	; () banked
  4025  001AB2  6F18               	movwf	24,b	;volatile
  4026                           
  4027                           ; BSR set to: 15
  4028                           ;can.c: 84: RXM0SIDL = mask0 << 5;
  4029  001AB4  3805               	swapf	ecan_init@mask0,w,c
  4030  001AB6  46E8               	rlncf	wreg,f,c
  4031  001AB8  0BE0               	andlw	224
  4032  001ABA  010F               	movlb	15	; () banked
  4033  001ABC  6F19               	movwf	25,b	;volatile
  4034                           
  4035                           ; BSR set to: 15
  4036                           ;can.c: 85: RXF0SIDLbits.EXIDEN = 0;
  4037  001ABE  010F               	movlb	15	; () banked
  4038  001AC0  9701               	bcf	1,3,b	;volatile
  4039                           
  4040                           ; BSR set to: 15
  4041                           ;can.c: 86: RXFCON0bits.RXF0EN = 1;
  4042  001AC2  010D               	movlb	13	; () banked
  4043  001AC4  81D4               	bsf	212,0,b	;volatile
  4044                           
  4045                           ; BSR set to: 13
  4046                           ;can.c: 104: CANCONbits.REQOP2 = 0;
  4047  001AC6  9E6F               	bcf	3951,7,c	;volatile
  4048                           
  4049                           ; BSR set to: 13
  4050                           ;can.c: 105: CANCONbits.REQOP1 = 0;
  4051  001AC8  9C6F               	bcf	3951,6,c	;volatile
  4052                           
  4053                           ; BSR set to: 13
  4054                           ;can.c: 106: CANCONbits.REQOP0 = 0;
  4055  001ACA  9A6F               	bcf	3951,5,c	;volatile
  4056  001ACC                     l282:
  4057  001ACC  AE6E               	btfss	3950,7,c	;volatile
  4058  001ACE  0012               	return	
  4059  001AD0  AC6E               	btfss	3950,6,c	;volatile
  4060  001AD2  0012               	return	
  4061  001AD4  AA6E               	btfss	3950,5,c	;volatile
  4062  001AD6  0012               	return	
  4063  001AD8  D7F9               	goto	l282
  4064  001ADA                     __end_of_ecan_init:
  4065                           	opt stack 0
  4066                           tblptru	equ	0xFF8
  4067                           tblptrh	equ	0xFF7
  4068                           tblptrl	equ	0xFF6
  4069                           tablat	equ	0xFF5
  4070                           postinc0	equ	0xFEE
  4071                           wreg	equ	0xFE8
  4072                           postdec1	equ	0xFE5
  4073                           fsr1l	equ	0xFE1
  4074                           postinc2	equ	0xFDE
  4075                           postdec2	equ	0xFDD
  4076                           fsr2h	equ	0xFDA
  4077                           fsr2l	equ	0xFD9
  4078                           status	equ	0xFD8
  4079                           
  4080 ;; *************** function _ConfigureOscillator *****************
  4081 ;; Defined at:
  4082 ;;		line 24 in file "config.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;		None
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;		None
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		None
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4100 ;;Total ram usage:        0 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; This function calls:
  4103 ;;		Nothing
  4104 ;; This function is called by:
  4105 ;;		_main
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text20
  4110  001C74                     __ptext20:
  4111                           	opt stack 0
  4112  001C74                     _ConfigureOscillator:
  4113                           	opt stack 30
  4114                           
  4115                           ;config.c: 29: OSCCONbits.IRCF2 = 1;
  4116                           
  4117                           ;incstack = 0
  4118  001C74  8CD3               	bsf	4051,6,c	;volatile
  4119                           
  4120                           ;config.c: 30: OSCCONbits.IRCF1 = 1;
  4121  001C76  8AD3               	bsf	4051,5,c	;volatile
  4122                           
  4123                           ;config.c: 31: OSCCONbits.IRCF0 = 1;
  4124  001C78  88D3               	bsf	4051,4,c	;volatile
  4125                           
  4126                           ;config.c: 33: OSCCONbits.SCS1 = 0;
  4127  001C7A  92D3               	bcf	4051,1,c	;volatile
  4128                           
  4129                           ;config.c: 34: OSCCONbits.SCS0 = 0;
  4130  001C7C  90D3               	bcf	4051,0,c	;volatile
  4131                           
  4132                           ;config.c: 36: OSCTUNEbits.PLLEN = 1;
  4133  001C7E  8C9B               	bsf	3995,6,c	;volatile
  4134  001C80  0012               	return		;funcret
  4135  001C82                     __end_of_ConfigureOscillator:
  4136                           	opt stack 0
  4137                           tblptru	equ	0xFF8
  4138                           tblptrh	equ	0xFF7
  4139                           tblptrl	equ	0xFF6
  4140                           tablat	equ	0xFF5
  4141                           postinc0	equ	0xFEE
  4142                           wreg	equ	0xFE8
  4143                           postdec1	equ	0xFE5
  4144                           fsr1l	equ	0xFE1
  4145                           postinc2	equ	0xFDE
  4146                           postdec2	equ	0xFDD
  4147                           fsr2h	equ	0xFDA
  4148                           fsr2l	equ	0xFD9
  4149                           status	equ	0xFD8
  4150                           tblptru	equ	0xFF8
  4151                           tblptrh	equ	0xFF7
  4152                           tblptrl	equ	0xFF6
  4153                           tablat	equ	0xFF5
  4154                           postinc0	equ	0xFEE
  4155                           wreg	equ	0xFE8
  4156                           postdec1	equ	0xFE5
  4157                           fsr1l	equ	0xFE1
  4158                           postinc2	equ	0xFDE
  4159                           postdec2	equ	0xFDD
  4160                           fsr2h	equ	0xFDA
  4161                           fsr2l	equ	0xFD9
  4162                           status	equ	0xFD8
  4163                           
  4164                           	psect	rparam
  4165  0000                     tblptru	equ	0xFF8
  4166                           tblptrh	equ	0xFF7
  4167                           tblptrl	equ	0xFF6
  4168                           tablat	equ	0xFF5
  4169                           postinc0	equ	0xFEE
  4170                           wreg	equ	0xFE8
  4171                           postdec1	equ	0xFE5
  4172                           fsr1l	equ	0xFE1
  4173                           postinc2	equ	0xFDE
  4174                           postdec2	equ	0xFDD
  4175                           fsr2h	equ	0xFDA
  4176                           fsr2l	equ	0xFD9
  4177                           status	equ	0xFD8


Data Sizes:
    Strings     158
    Constant    0
    Data        4
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     51      76
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    uart_write_text@text	PTR unsigned char  size(2) Largest target is 33
		 -> STR_14(CODE[30]), STR_13(CODE[30]), STR_12(CODE[30]), STR_11(CODE[30]), 
		 -> STR_10(CODE[30]), STR_9(CODE[30]), STR_8(CODE[30]), STR_7(CODE[30]), 
		 -> STR_6(CODE[30]), STR_5(CODE[30]), STR_4(CODE[32]), STR_3(CODE[31]), 
		 -> STR_2(CODE[33]), STR_1(CODE[32]), 

    movement@margin	PTR int  size(2) Largest target is 2
		 -> margin7(COMRAM[2]), margin6(COMRAM[2]), margin5(COMRAM[2]), margin4(COMRAM[2]), 
		 -> margin3(COMRAM[2]), margin2(COMRAM[2]), margin1(COMRAM[2]), margin0(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_uart_init
    _uart_write_text->_uart_write
    _uart_init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   14674
                                             28 COMRAM    23    23      0
                _ConfigureOscillator
                          _ecan_init
                           _movement
                            _readADC
                          _selectAN0
                          _selectAN1
                          _selectAN2
                          _selectAN3
                          _selectAN4
                          _selectAN5
                          _selectAN6
                          _selectAN7
                   _setActuatorCntrl
                        _setAnalogIn
                    _uart_data_ready
                          _uart_init
                          _uart_read
                    _uart_write_text
 ---------------------------------------------------------------------------------
 (1) _uart_write_text                                      6     4      2    1001
                                              1 COMRAM     6     4      2
                         _uart_write
 ---------------------------------------------------------------------------------
 (2) _uart_write                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                           14    10      4     559
                                             14 COMRAM    14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     428
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _uart_data_ready                                      1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setAnalogIn                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setActuatorCntrl                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectAN7                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectAN6                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectAN5                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectAN4                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectAN3                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectAN2                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectAN1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectAN0                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readADC                                              4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _movement                                            14     6      8   10908
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _ecan_init                                            6     6      0      60
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _ecan_init
   _movement
   _readADC
   _selectAN0
   _selectAN1
   _selectAN2
   _selectAN3
   _selectAN4
   _selectAN5
   _selectAN6
   _selectAN7
   _setActuatorCntrl
   _setAnalogIn
   _uart_data_ready
   _uart_init
     ___aldiv
   _uart_read
   _uart_write_text
     _uart_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     33      4C       1       80.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4C      20        0.0%
DATA                 0      0      4C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Fri Apr 22 08:05:13 2016

           ??_uart_data_ready 0001                uart_write@data 0001                            l67 0E1E  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                  __CFG_CP4$OFF 000000  
                __CFG_CP5$OFF 000000                   __CFG_LVP$ON 000000                           l402 1C70  
                         l406 1C8E                           l414 1C84                           l281 1A2C  
                         l169 1C4A                           l282 1ACC                           l277 1A22  
                __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000                           wreg 000FE8  
                __CFG_WDT$OFF 000000                          l1163 1C96                          l1621 1B9C  
                        l1641 1822                          l1553 196C                          l1617 1B7C  
                        l1801 10A8                          l1651 1872                          l1637 180A  
                        l1645 1844                          l1565 19A6                          l1581 19F4  
                        l1741 0EC4                          l1813 110A                          l1671 1910  
                        l1663 18D0                          l1655 1890                          l1647 1854  
                        l1567 19B2                          l1559 1984                          l1831 116A  
                        l1823 113A                          l1807 10DA                          l1735 0E9A  
                        l1585 1A0A                          l1577 19E6                          l1569 19B6  
                        l1753 0F18                          l1675 1930                          l1667 18F0  
                        l1659 18B0                          l1843 11B2                          l1835 1182  
                        l1827 1152                          l1819 1122                          l1771 0FAE  
                        l1747 0EEE                          l1765 0F7C                          l1847 11CA  
                        l1839 119A                          l1783 1012                          l1759 0F4A  
                        l1857 1304                          l1777 0FE0                          l1867 143E  
                        l1795 1076                          l1877 1578                          l1789 1044  
                        l1889 16BA                          _BACK 0034                          STR_1 0D22  
                        STR_2 0D01                          STR_3 0D62                          STR_4 0D42  
                        STR_5 0D81                          STR_6 0D81                          STR_7 0D81  
                        STR_8 0D81                          STR_9 0D81                          u1005 1AEC  
                        u1015 1B36                          u1105 1864                          u1106 1866  
                        u1115 186E                          u1116 1870                          u1205 18CC  
                        u1206 18CE                          u1135 1882                          u1136 1884  
                        u1225 18E2                          u1145 188C                          u1226 18E4  
                        u1146 188E                          u1315 1942                          u1235 18EC  
                        u1316 1944                          u1236 18EE                          u1325 194C  
                        u1165 18A2                          u1326 194E                          u1166 18A4  
                        u1255 1902                          u1175 18AC                          u1256 1904  
                        u1176 18AE                          u1265 190C                          u1266 190E  
                        u1195 18C2                          u1196 18C4                          u1285 1922  
                        u1286 1924                          u1295 192C                          u1296 192E  
                        _FORW 0037                          _RCIF 007CF5                          _TRMT 007D61  
                 main@message 002F                          _main 0DA0                          fsr2h 000FDA  
                        fsr1l 000FE1                          fsr2l 000FD9                          start 0000  
               __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000                  ___param_bank 000010  
            uart_write_text@i 0006               __end_of___aldiv 1A1C                         ?_main 0001  
    __size_of_uart_write_text 004A                         STR_10 0D81                         STR_11 0D81  
                       STR_12 0D81                         STR_13 0D81                         STR_14 0D81  
                       _RCREG 000FAE                         _SPBRG 000FAF                         _TXREG 000FAD  
         _ConfigureOscillator 1C74                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
               __CFG_WRT4$OFF 000000                 __CFG_WRT5$OFF 000000      __end_of_setActuatorCntrl 1C48  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                __CFG_EBTR4$OFF 000000  
              __CFG_EBTR5$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_readADC 1C62                __CFG_EBTRB$OFF 000000  
                       tablat 000FF5                         status 000FD8                __CFG_PBADEN$ON 000000  
        ?_ConfigureOscillator 0001               __initialization 1BBC                  ?_setAnalogIn 0001  
                __end_of_main 17DE                 main@actuator0 001D                 main@actuator1 001F  
               main@actuator2 0021                 main@actuator3 0023                 main@actuator4 0025  
               main@actuator5 0027                 main@actuator6 0029                 main@actuator7 002B  
                      ??_main 001D                 __activetblptr 000001                        _ADRESH 000FC4  
                      _ADRESL 000FC3               __CFG_BBSIZ$1024 000000                        _CUSTOM 0035  
                      _EXTEND 0036                        _RXB0D0 000F66                        _RXB0D1 000F67  
                      _RXB0D2 000F68                        _RXB0D3 000F69                        _RXB0D4 000F6A  
                      _RXB1D0 000F56                        _RXB0D5 000F6B                        _RXB1D1 000F57  
                      _RXB0D6 000F6C                        _RXB1D2 000F58                        _RXB0D7 000F6D  
                      _RXB1D3 000F59                        _RXB1D4 000F5A                        _RXB1D5 000F5B  
                      _RXB1D6 000F5C                        _RXB1D7 000F5D                        _TXB0D0 000F46  
                      _TXB0D1 000F47                        _TXB0D2 000F48                        _TXB0D3 000F49  
                      _TXB0D4 000F4A                        _TXB0D5 000F4B                        _TXB0D6 000F4C  
                      _TXB0D7 000F4D         ??_ConfigureOscillator 0001              movement@actuator 0005  
              __CFG_XINST$OFF 000000                 main@extendPos 0032                     ??___aldiv 0009  
              __CFG_STVREN$ON 000000                        clear_0 1BC2                     ??_readADC 0003  
             __CFG_BOREN$BOHW 000000                 ecan_init@sid0 0003                  __pdataCOMRAM 0049  
            __end_of_movement 1950                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8             ??_uart_write_text 0004  
             _uart_data_ready 1C62                    __accesstop 0060       __end_of__initialization 1BE8  
               ___rparam_used 000001                __pcstackCOMRAM 0001            __size_of_ecan_init 00BE  
          __size_of_selectAN0 000A            __size_of_selectAN1 000A            __size_of_selectAN2 000A  
          __size_of_selectAN3 000A            __size_of_selectAN4 000A            __size_of_selectAN5 000A  
          __size_of_selectAN6 000A            __size_of_selectAN7 000A          __size_of_setAnalogIn 002E  
          __size_of_uart_init 0098            __size_of_uart_read 000C                       _RETRACT 0038  
     __end_of_uart_data_ready 1C74                       _RXB0DLC 000F65                       _RXB1DLC 000F55  
           ?_setActuatorCntrl 0001                       _TXB0DLC 000F45             __end_of_ecan_init 1ADA  
          ??_setActuatorCntrl 0001                       __Hparam 0000                       __Lparam 0000  
                   ?_movement 0001                       ___aldiv 1950                  __psmallconst 0D00  
                     __pcinit 1BBC                       __ramtop 0D00                       __ptext0 0DA0  
                     __ptext1 1B72                       __ptext2 1C82                       __ptext3 1C8E  
                     __ptext4 1ADA                       __ptext5 1950                       __ptext6 1C62  
                     __ptext7 1BF6                       __ptext8 1C24                       __ptext9 1C9A  
                     _readADC 1C48                       _margin0 0039                       _margin1 003B  
                     _margin2 003D                       _margin3 003F                       _margin4 0041  
                     _margin5 0043                       _margin6 0045                       _margin7 0047  
            ___aldiv@dividend 0001                main@retractPos 0030             __end_of_selectAN0 1CEA  
           __end_of_selectAN1 1CE0             __end_of_selectAN2 1CD6             __end_of_selectAN3 1CCC  
        end_of_initialization 1BE8             __end_of_selectAN4 1CC2             __end_of_selectAN5 1CB8  
           __end_of_selectAN6 1CAE             __end_of_selectAN7 1CA4                ecan_init@mask0 0005  
           __end_of_uart_init 1B72             __end_of_uart_read 1C9A             movement@set_point 0003  
                  ??_movement 0009                     _RCSTAbits 000FAB              ___aldiv@quotient 000B  
                     postdec1 000FE5                       postdec2 000FDD                    _retractPos 004B  
                     postinc0 000FEE                       postinc2 000FDE               _uart_write_text 1B72  
                  _uart_write 1C82                     _TRISAbits 000F92                     _TRISBbits 000F93  
                   _TRISCbits 000F94                     _TRISDbits 000F95                     _TRISEbits 000F96  
            ?_uart_data_ready 0001   __end_of_ConfigureOscillator 1C82                     _TXSTAbits 000FAC  
                  main@newPos 002D             readADC@digitalVal 0003                 __pidataCOMRAM 1CEA  
                 _ECANCONbits 000F77                movement@margin 0007           start_initialization 1BBC  
                 _CANSTATbits 000F6E              __CFG_OSC$IRCIO67 000000       __end_of_uart_write_text 1BBC  
            __CFG_LPT1OSC$OFF 000000                   ?_uart_write 0001                   __pbssCOMRAM 0034  
                 _BRGCON1bits 000F70                   _BRGCON2bits 000F71                   _BRGCON3bits 000F72  
                   _ecan_init 1A1C     __size_of_setActuatorCntrl 0024                 ??_setAnalogIn 0001  
         uart_write_text@text 0002                      ?___aldiv 0001             __size_of_movement 0172  
                    ?_readADC 0001                   __smallconst 0D00                     _extendPos 0049  
             ___aldiv@divisor 0005               ___aldiv@counter 0009                      _LATAbits 000F89  
                    _LATBbits 000F8A                      _LATCbits 000F8B                      _LATDbits 000F8C  
         __size_of_uart_write 000C                    ?_ecan_init 0001                     _selectAN0 1CE0  
                   _selectAN1 1CD6                     _selectAN2 1CCC                     _selectAN3 1CC2  
                   _selectAN4 1CB8                     _selectAN5 1CAE                     _selectAN6 1CA4  
                   _selectAN7 1C9A                      _PIE3bits 000FA3           movement@current_pos 0001  
                    _PIR1bits 000F9E              ?_uart_write_text 0002                      _RCONbits 000FD0  
            __CFG_WDTPS$32768 000000                      _RXB0SIDH 000F61                      _RXB0SIDL 000F62  
                    _RXB1SIDH 000F51                      _RXB1SIDL 000F52                      _RXF0SIDH 000F00  
                    _RXF0SIDL 000F01                     _uart_init 1ADA                     _uart_read 1C8E  
                    _TXB0SIDH 000F41                      _TXB0SIDL 000F42                    uart_init@x 001B  
                    _RXM0SIDH 000F18                      _RXM0SIDL 000F19           __end_of_setAnalogIn 1C24  
                  _ADCON0bits 000FC2                    _ADCON1bits 000FC1                    _ADCON2bits 000FC0  
                   copy_data0 1BDC                    _CANCONbits 000F6F                 movement@move0 000B  
               movement@move1 000D                    ?_selectAN0 0001                    ?_selectAN1 0001  
                  ?_selectAN2 0001                    ?_selectAN3 0001                    ?_selectAN4 0001  
                  ?_selectAN5 0001                    ?_selectAN6 0001                    ?_selectAN7 0001  
                    __Hrparam 0000                      __Lrparam 0000                  __Lsmallconst 0D00  
                  ?_uart_init 000F                    ?_uart_read 0001              __size_of___aldiv 00CC  
                  _CIOCONbits 000F73              __size_of_readADC 001A                  _RXF0SIDLbits 000F01  
                    __ptext10 1CA4                      __ptext11 1CAE                      __ptext20 1C74  
                    __ptext12 1CB8                      __ptext13 1CC2                      __ptext14 1CCC  
                    __ptext15 1CD6                      __ptext16 1CE0                      __ptext17 1C48  
                    __ptext18 17DE                      __ptext19 1A1C                 __size_of_main 0A3E  
                 ??_ecan_init 0001      __size_of_uart_data_ready 0012  __size_of_ConfigureOscillator 000E  
                _TXB0SIDLbits 000F42              _setActuatorCntrl 1C24                      _movement 17DE  
                 _setAnalogIn 1BF6                  ??_uart_write 0001                   _RXB0CONbits 000F60  
                 _RXB1CONbits 000F50                   _OSCTUNEbits 000F9B                    _INTCONbits 000FF2  
           uart_init@baudrate 000F                   ??_selectAN0 0001                   ??_selectAN1 0001  
                 ??_selectAN2 0001                   ??_selectAN3 0001                   ??_selectAN4 0001  
                 ??_selectAN5 0001                   ??_selectAN6 0001                   ??_selectAN7 0001  
                 _TXB0CONbits 000F40            __end_of_uart_write 1C8E                    _OSCCONbits 000FD3  
                 ??_uart_init 0013                   ??_uart_read 0001                   _RXFCON0bits 000DD4  
                ___aldiv@sign 000A          _uart_data_ready$2270 0001  
